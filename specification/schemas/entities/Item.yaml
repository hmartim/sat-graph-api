#
# OpenAPI 3.x Schema for the 'Item' Data Model
#
# This file defines the schema for the 'Item' object, which represents a timeless,
# structural entity within the SAT-Graph. An 'Item' is the abstract representation
# of a document (like a legal norm) or one of its hierarchical components.
# In the SAT-Graph ontology, it corresponds to the 'Work' or 'Component Work' concepts.
#
# It is intentionally atemporal and does not contain textual content itself; that
# is handled by the 'Version' and 'TextUnit' models.
#

type: object
description: >
  Represents a timeless, foundational entity within the SAT Graph. An 'Item'
  acts as a stable, version-agnostic anchor for a specific concept.

  While its primary role is to model the formal structure of a document (as a 'Work' or
  'Work Component'), it is flexible enough to represent other key entities, such as:
  - **Defined Terms:** A specific term (e.g., 'Complementary Law').
  - **Abstract Concepts:** A legal or procedural concept (e.g., 'Revocation', 'Due Process').
  - **Named Entities:** A real-world entity like an organization or location (e.g., 'National Congress').

  The 'Item' itself is just a structural and conceptual anchor. Its semantic meaning and
  textual content are provided by associated 'TextUnit' objects, typically with an
  aspect like 'description', 'summary'.
required:
  - id
  - category
  - type
  - label
properties:
  id:
    $ref: '../core/ID.yaml'
  category:
    type: string
    description: >-
      The architectural class of the item, which defines its fundamental nature.
      This list can be extended by a concrete implementation.
    minLength: 1
    enum:
      - "Work"
      - "Work Component"
      - "Term"
      - "Concept"
      - "NamedEntity"
    example: "Work"
  type:
    type: string
    description: >-
      The specific semantic type of the item. For a 'NamedEntity', this could be
      'Organization', 'Person', etc. For a 'Work', it could be 'Constitution', 'Statute', etc.
    minLength: 1
    example: "Constitution"
  label:
    type: string
    description: "The human-readable label or title for the item."
    minLength: 1
    example: "Brazilian Constitution of 1988"
  parent:
    $ref: '../core/ID.yaml'
    nullable: true
    description: >-
      The canonical ID of the single structural parent of this item. This field is
      primarily relevant for 'Work Component' items to define the document hierarchy.
      For other categories like 'Concept' or 'Term', it may be used to build a taxonomy.
  children:
    type: array
    nullable: true
    description: >-
      An optional list of canonical IDs for the immediate children of this item.
      Primarily used to define the document hierarchy for 'Work' and 'Work Component' items.
    items:
      $ref: '../core/ID.yaml'
  metadata:
    $ref: '../core/JSON.yaml'
    nullable: true
    description: >-
      A flexible field for any valid JSON data. Used for storing structured,
      atemporal properties of the item, such as jurisdiction, publication data,
      or other domain-specific attributes that don't fit into the other fields.
      
      This approach is exemplified in this paper, that proposes a structured 
      metadata description for legal norm's "Work":
      [Legal Knowledge Graph Foundations, Part- I: URI-Addressable Abstract Works (LRMoo F1 to schema.org)](https://arxiv.org/abs/2508.00827).