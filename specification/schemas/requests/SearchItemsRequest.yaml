type: object
description: |
  The request body for the searchItems operation.

  **Filter Logic:**
  - If both `categories` and `item_type_ids` are provided, only items satisfying BOTH conditions are included (AND logic).
  - These explicit filters are more efficient than using `item_metadata_filter` for category/type filtering.
properties:
  item_ids:
    type: array
    items:
      $ref: '../core/ID.yaml'
    description: "Optional. A list of 'Item' IDs to define the search scope."
  theme_ids:
    type: array
    items:
      $ref: '../core/ID.yaml'
    description: "Optional. A list of 'Theme' IDs to expand the search scope."
  categories:
    type: array
    items:
      type: string
      enum:
        - "Work"
        - "Work Component"
        - "Term"
        - "Concept"
        - "Named Entity"
    description: >
      Optional. Filter search results to only items with the specified categories.
      When combined with `item_type_ids`, both filters must be satisfied (AND logic).
      More efficient than using `item_metadata_filter` for category filtering.
    example: ["Work Component"]
  item_type_ids:
    type: array
    items:
      $ref: '../core/ID.yaml'
    description: >
      Optional. Filter search results to only items of the specified types.
      When combined with `categories`, both filters must be satisfied (AND logic).
      More efficient than using `item_metadata_filter` for type filtering.
    example: ["item-type:article", "item-type:paragraph"]
  item_metadata_filter:
    $ref: '../common/ItemMetadataFilterSchema.yaml'
  semantic_query:
    type: string
    description: "The natural language query string for vector search."
  lexical_query:
    type: string
    description: "Keywords or phrases for a full-text syntactic search."
  top_k:
    type: integer
    format: int32
    default: 10
    minimum: 1
    description: "The maximum number of results to return."
  datasources:
    $ref: '../common/DatasourcesSchema.yaml'
