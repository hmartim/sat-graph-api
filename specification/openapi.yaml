openapi: 3.0.3

info:
  title: "Canonical Action API for SAT-Graph RAG"
  version: "1.0.0"
  description: |
    This is the official OpenAPI 3.x specification for the **Canonical Action API**, 
    a formal, auditable interface for querying the Structure-Aware Temporal Graph (SAT-Graph).

    The complete architectural framework is proposed in the paper:
    - **[An Ontology-Driven Graph RAG for Legal Norms: A Structural, Temporal, and Deterministic Approach](https://arxiv.org/abs/2508.00827)**

    This API provides a library of atomic and composable actions that serve as the 
    fundamental building blocks for constructing reliable legal retrieval plans.

    **Authentication Note:** All endpoints in this API are protected. A valid API Key
    must be sent in the `Authorization` header on every request. Please refer to the
    'securitySchemes' section below for details.

    **Data Scoping Note:** The API serves data from multiple providers, called **Datasources**.
    All requests are automatically scoped to the Datasources granted to your API key.
    Many search functions also provide an optional `datasources` parameter for more granular filtering.

components:
  schemas:
    # Core schemas
    ID:
      $ref: './schemas/core/ID.yaml'
    JSON:
      $ref: './schemas/core/JSON.yaml'
    TimeInterval:
      $ref: './schemas/core/TimeInterval.yaml'
    TemporalPolicy:
      $ref: './schemas/core/TemporalPolicy.yaml'
    
    # Entity schemas
    Item:
      $ref: './schemas/entities/Item.yaml'
    Version:
      $ref: './schemas/entities/Version.yaml'
    Theme:
      $ref: './schemas/entities/Theme.yaml'
    TextUnit:
      $ref: './schemas/entities/TextUnit.yaml'
    
    # Relationship schemas
    Action:
      $ref: './schemas/relationships/Action.yaml'
    Relation:
      $ref: './schemas/relationships/Relation.yaml'
    
    # Request schemas
    SearchItemsRequest:
      $ref: './schemas/requests/SearchItemsRequest.yaml'
    SearchTextUnitsRequest:
      $ref: './schemas/requests/SearchTextUnitsRequest.yaml'
    EnumerateItemsRequest:
      $ref: './schemas/requests/EnumerateItemsRequest.yaml'
    GetRelationsRequest:
      $ref: './schemas/requests/GetRelationsRequest.yaml'
    
    # Response schemas
    StructuralContext:
      $ref: './schemas/responses/StructuralContext.yaml'
    ResolvedEntityCandidate:
      $ref: './schemas/responses/ResolvedEntityCandidate.yaml'
    SearchResultUnit:
      $ref: './schemas/responses/SearchResultUnit.yaml'
    SearchedItemResult:
      $ref: './schemas/responses/SearchedItemResult.yaml'
    DatasourcesSchema:
      $ref: './schemas/responses/DatasourcesSchema.yaml'
    ItemMetadataFilterSchema:
      $ref: './schemas/responses/ItemMetadataFilterSchema.yaml'
    MetadataFilter:
      $ref: './schemas/responses/MetadataFilter.yaml'
    ErrorResponse:
      $ref: './schemas/responses/ErrorResponse.yaml'

  parameters:
    DatasourcesParameter:
      name: datasources
      in: query
      required: false
      description: |
        **Optional.** A list of identifiers for the Datasources to scope the search.

        A Datasource is the system or provider where an entity originates (e.g., 'datasource_Senate'). This parameter allows you to narrow a search to a specific subset of the Datasources you have access to.

        The API will only return results from Datasources that are both *requested* in this parameter and *granted* to your API key. If this parameter is omitted, the search will run against all Datasources your key is granted to.
      schema:
        type: array
        items:
          type: string
        uniqueItems: true
      example: ["datasource_A"]

  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
      description: |
        API Key-based authentication. Each consumer must provide their unique API Key
        directly in the `Authorization` header for every request.

        **Example:** `Authorization: YOUR_API_KEY`

        API Keys can be obtained by contacting the system administrator.

  responses:
    BadRequest:
      description: "Bad Request - The request is missing a required parameter, includes an invalid parameter value, or is otherwise malformed."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: "INVALID_PARAMETER"
            message: "The 'top_k' parameter must be a positive integer."

    Unauthorized:
      description: "Unauthorized - The request lacks valid authentication credentials. The API Key is missing or invalid."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: "UNAUTHORIZED"
            message: "Authentication credentials were not provided or are invalid."

    Forbidden:
      description: "Forbidden - The server understood the request, but is refusing to fulfill it. The API Key is valid but lacks permission for the requested resource or datasource."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: "FORBIDDEN_DATASOURCE"
            message: "The provided API Key does not have access to the 'datasource_STF' datasource."

    NotFound:
      description: "Not Found - The requested resource could not be found."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: "RESOURCE_NOT_FOUND"
            message: "No Item found with the specified ID."

security:
  - ApiKeyAuth: []

paths:
  # --- discovery ---
  /resolve-item-reference:
    $ref: './paths/discovery/resolve-item-reference.yaml#~1resolve-item-reference'
  /resolve-theme-reference:
    $ref: './paths/discovery/resolve-theme-reference.yaml#~1resolve-theme-reference'
  /search-items:
    $ref: './paths/discovery/search-items.yaml#~1search-items'
  /search-themes:
    $ref: './paths/discovery/search-themes.yaml#~1search-themes'
  /search-text-units:
    $ref: './paths/discovery/search-text-units.yaml#~1search-text-units'

  # --- deterministic-fetch ---
  /actions/{actionId}:
    $ref: './paths/deterministic-fetch/get-action-by-id.yaml#~1actions~1{actionId}'
  /items/{itemId}:
    $ref: './paths/deterministic-fetch/get-item-by-id.yaml#~1items~1{itemId}'
  /relations/{relationId}:
    $ref: './paths/deterministic-fetch/get-relation-by-id.yaml#~1relations~1{relationId}'
  /themes/{themeId}:
    $ref: './paths/deterministic-fetch/get-theme-by-id.yaml#~1themes~1{themeId}'
  /text-units/{textUnitId}:
    $ref: './paths/deterministic-fetch/get-text-unit-by-id.yaml#~1text-units~1{textUnitId}'
  /versions/{versionId}:
    $ref: './paths/deterministic-fetch/get-version-by-id.yaml#~1versions~1{versionId}'

  /items/batch-get:
    $ref: './paths/deterministic-fetch/get-batch-items.yaml#~1items~1batch-get'
  /versions/batch-valid-at:
    $ref: './paths/deterministic-fetch/get-batch-valid-versions.yaml#~1versions~1batch-valid-at'
  /actions/batch-get:
    $ref: './paths/deterministic-fetch/get-batch-actions.yaml#~1actions~1batch-get'

  # --- navigation ---
  /items/{itemId}/ancestors:
    $ref: './paths/navigation/get-ancestors.yaml#~1items~1{itemId}~1ancestors'
  /items/{itemId}/context:
    $ref: './paths/navigation/get-item-context.yaml#~1items~1{itemId}~1context'
  /items/{itemId}/themes:
    $ref: './paths/navigation/get-themes-for-item.yaml#~1items~1{itemId}~1themes'
  /enumerate-items:
    $ref: './paths/navigation/enumerate-items.yaml#~1enumerate-items'

  # --- graph-traversal ---
  /entities/{entityId}/related:
    $ref: './paths/graph-traversal/find-related-entities.yaml#~1entities~1{entityId}~1related'
  /query-relations:
    $ref: './paths/graph-traversal/get-relations.yaml#~1query-relations'

  # --- causal-analysis ---
  /items/{itemId}/valid-version:
    $ref: './paths/causal-analysis/get-valid-version.yaml#~1items~1{itemId}~1valid-version'
  /versions/{versionId}/text-unit:
    $ref: './paths/causal-analysis/get-version-text-unit.yaml#~1versions~1{versionId}~1text-unit'
  /items/{itemId}/history:
    $ref: './paths/causal-analysis/get-item-history.yaml#~1items~1{itemId}~1history'
  /versions/{versionId}/causality:
    $ref: './paths/causal-analysis/trace-causality.yaml#~1versions~1{versionId}~1causality'
  /items/{itemId}/versions:
    $ref: './paths/causal-analysis/get-versions-in-interval.yaml#~1items~1{itemId}~1versions'
  /versions/compare:
    $ref: './paths/causal-analysis/compare-versions.yaml#~1versions~1compare'
  /items/{sourceWorkId}/actions-caused:
    $ref: './paths/causal-analysis/get-actions-by-source.yaml#~1items~1{sourceWorkId}~1actions-caused'

  # --- aggregate-analysis ---
  /analysis/impact-summary:
    $ref: './paths/aggregate-analysis/summarize-impact.yaml#~1analysis~1impact-summary'

  # --- introspection & metadata ---
  /items/{itemId}/temporal-coverage:
    $ref: './paths/introspection/get-temporal-coverage.yaml#~1items~1{itemId}~1temporal-coverage'
  /meta/languages:
    $ref: './paths/introspection/get-available-languages.yaml#~1meta~1languages'
  /meta/action-types:
    $ref: './paths/introspection/get-supported-action-types.yaml#~1meta~1action-types'
  /themes/roots:
    $ref: './paths/introspection/get-root-themes.yaml#~1themes~1roots'
