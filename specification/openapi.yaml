openapi: 3.0.3

info:
  title: "Canonical Action API for SAT-Graph RAG"
  version: "1.0.0"
  description: |
    This is the official OpenAPI 3.x specification for the **Canonical Action API**, 
    a formal, auditable interface for querying the Structure-Aware Temporal Graph (SAT-Graph).

    The complete architectural framework is proposed in the paper:
    - **[An Ontology-Driven Graph RAG for Legal Norms: A Structural, Temporal, and Deterministic Approach](https://arxiv.org/abs/2508.00827)**

    This API provides a library of atomic and composable actions that serve as the 
    fundamental building blocks for constructing reliable legal retrieval plans.

    **Authentication Note:** All endpoints in this API are protected. A valid API Key
    must be sent in the `Authorization` header on every request. Please refer to the
    'securitySchemes' section below for details.

    **Data Scoping Note:** The API serves data from multiple providers, called **Datasources**.
    All requests are automatically scoped to the Datasources granted to your API key.
    Many search functions also provide an optional `datasources` parameter for more granular filtering.

components:
  schemas:
    ID:
      $ref: './schemas/ID.yaml'
    JSON:
      $ref: './schemas/JSON.yaml'
    TimeInterval:
      $ref: './schemas/TimeInterval.yaml'
    Theme:
      $ref: './schemas/Theme.yaml'
    Item:
      $ref: './schemas/Item.yaml'
    Version:
      $ref: './schemas/Version.yaml'
    TextUnit:
      $ref: './schemas/TextUnit.yaml'
    Action:
      $ref: './schemas/Action.yaml'
    Relation:
      $ref: './schemas/Relation.yaml'

    TemporalPolicy:
      type: string
      description: |
        Specifies the temporal resolution logic for finding a valid version.
        This is essential for guaranteeing determinism when multiple events occur on the same day.

        - `PointInTime`: (Strict) Finds the version whose validity interval strictly contains the exact timestamp.
        - `SnapshotLast`: (Common) Finds the last version that was valid at any point during the day of the given timestamp. Treats the query as "what was the state of the law at the end of this day?".
      enum:
        - "PointInTime"
        - "SnapshotLast"
      default: "SnapshotLast"

    StructuralContext:
      type: object
      description: "Contains the complete, immediate structural context of a single Item."
      required:
        - target
      properties:
        target:
          $ref: '#/components/schemas/Item'
          description: "The full object of the item in question."
        parent:
          $ref: '#/components/schemas/Item'
          nullable: true
          description: "The full object of the item's immediate parent."
        siblings:
          type: array
          nullable: true
          description: "A list of full objects for the item's siblings (other items with the same parent)."
          items:
            $ref: '#/components/schemas/Item'
        children:
          type: array
          nullable: true
          description: "A list of full objects for the item's immediate children."
          items:
            $ref: '#/components/schemas/Item'

    ResolvedEntityCandidate:
      type: object
      description: "Represents a single candidate match for a resolved entity (e.g., an Item or a Theme)."
      required:
        - id
        - confidence
      properties:
        id:
          $ref: '#/components/schemas/ID'
          description: "The probable canonical ID of the matched entity."
        confidence:
          type: number
          format: float
          description: "A score from 0.0 to 1.0 indicating the certainty of the match."
          minimum: 0.0
          maximum: 1.0
          example: 0.95

    ErrorResponse:
      type: object
      description: A standard format for error responses.
      properties:
        code:
          type: string
          description: "An internal, machine-readable error code."
          example: "FORBIDDEN_DATASOURCE"
        message:
          type: string
          description: "A human-readable description of the error."
          example: "The provided API Key does not have access to the 'datasource_STF' datasource."

    ItemMetadataFilterSchema:
      type: object
      additionalProperties: true
      description: >-
        A set of key-value pairs to filter against the atemporal metadata of an 'Item'.
        The exact query capabilities (e.g., range queries, existence checks) depend on
        the backend implementation.
      example:
        jurisdiction: "federal"
        type: "Statute"

    MetadataFilter:
      type: object
      description: "A structured object for applying metadata-based filters."
      properties:
        item_metadata_filter:
          $ref: '#/components/schemas/ItemMetadataFilterSchema'
        version_metadata_filter:
          type: object
          additionalProperties: true
          description: "Key-value pairs to filter against the metadata of the 'Version'."
          example:
            publication_date: { ">=": "2010-01-01T00:00:00Z" }

    SearchRequest:
      type: object
      description: "The request body for the searchTextUnits operation."
      properties:
        version_ids:
          type: array
          items:
            $ref: '#/components/schemas/ID'
          description: >-
            Explicit Version Scope. A list of specific 'Version' IDs. Mutually
            exclusive with the combination of 'item_ids'/'theme_ids' and 'timestamp'.
        item_ids:
          type: array
          items:
            $ref: '#/components/schemas/ID'
          description: "Conceptual Scope. A list of 'Item' IDs to define the structural scope."
        theme_ids:
          type: array
          items:
            $ref: '#/components/schemas/ID'
          description: "Conceptual Scope. A list of 'Theme' IDs to define the thematic scope."
        metadata_filter:
          $ref: '#/components/schemas/MetadataFilter'
        timestamp:
          type: string
          format: date-time
          description: >-
            Conceptual Scope. A UTC date-time to constrain the search. Defaults to 'now' if omitted.
            Ignored if 'version_ids' is provided.
        semantic_query:
          type: string
          description: "The natural language query string for vector search."
        lexical_query:
          type: string
          description: "Keywords or phrases for a full-text syntactic search."
        language:
          type: string
          description: "The IETF BCP 47 language code for the content."
          example: "pt-BR"
        aspects:
          type: array
          items:
            type: string
          default: ["canonical"]
          description: "A list of textual aspects to search within (e.g., 'canonical', 'summary')."
        top_k:
          type: integer
          format: int32
          default: 10
          minimum: 1
          description: "The maximum number of results to return."
        datasources:
          $ref: '#/components/schemas/DatasourcesSchema'
          description: "Optional. Scopes the search to a specific list of granted datasources."

    SearchResultUnit:
      type: object
      description: "Represents a single search result, containing a TextUnit and its relevance score."
      required:
        - text_unit
        - score
      properties:
        text_unit:
          $ref: '#/components/schemas/TextUnit'
        score:
          type: number
          format: float
          description: "The relevance score of the result, typically between 0.0 and 1.0."
          minimum: 0.0
          maximum: 1.0

    SearchedItemResult:
      type: object
      description: "Represents a single search result, containing an Item and its relevance score."
      required:
        - item
        - score
      properties:
        item:
          $ref: '#/components/schemas/Item'
        score:
          type: number
          format: float
          description: "The relevance score of the result, typically between 0.0 and 1.0."
          minimum: 0.0
          maximum: 1.0

    DatasourcesSchema:
      type: array
      description: |
        A list of datasource identifiers. A datasource is the system or provider
        where an entity originates (e.g., 'datasource_Senate').
      items:
        type: string
      uniqueItems: true
      example: ["datasource_A"]

    EnumerateItemsRequest:
      type: object
      description: "Specifies the scope for enumerating Item objects."
      properties:
        item_ids:
          type: array
          items:
            $ref: '#/components/schemas/ID'
          description: "Optional. A list of 'Item' IDs to define a structural scope. The function will return these items and/or their descendants."
        theme_ids:
          type: array
          items:
            $ref: '#/components/schemas/ID'
          description: "Optional. A list of 'Theme' IDs to define a thematic scope. The function will return all member items of these themes."
        depth:
          type: integer
          description: >
            Controls traversal depth for 'item_ids' scopes. If `depth=1`, only direct children are returned. If omitted or negative, all descendants are returned recursively. This parameter is ignored for 'theme_ids' scopes.
          default: -1
        datasources:
          $ref: '#/components/schemas/DatasourcesSchema'

    GetRelationsRequest:
      type: object
      description: "Specifies the criteria for querying Relation objects. If 'entity_id' is omitted, the query runs against the entire corpus of relations."
      properties:
        entity_id:
          $ref: '#/components/schemas/ID'
          description: "Optional. The ID of an anchor entity. If provided, 'entity_type' is required."
        entity_type:
          type: string
          description: "Optional. The type of the anchor entity. Required only if 'entity_id' is provided."
          enum: [ "Item", "Version" ]
        predicate:
          type: string
          description: "Optional. Filters relations by a specific predicate (e.g., 'cites')."
        direction:
          type: string
          description: "Specifies the direction of the relations to retrieve relative to the 'entity_id'."
          enum: [ "forward", "backward", "both" ]
          default: "both"
        validity_interval_filter:
          type: object
          description: "Optional. Filters relations to those whose validity interval overlaps with the specified interval."
          properties:
            start_time:
              type: string
              format: date-time
            end_time:
              type: string
              format: date-time
        metadata_filter:
          type: object
          additionalProperties: true
          description: "Optional. Key-value pairs to filter against the 'metadata' of the Relation."
        datasources:
          $ref: '#/components/schemas/DatasourcesSchema'

  parameters:
    DatasourcesParameter:
      name: datasources
      in: query
      required: false
      description: |
        **Optional.** A list of identifiers for the Datasources to scope the search.

        A Datasource is the system or provider where an entity originates (e.g., 'datasource_Senate'). This parameter allows you to narrow a search to a specific subset of the Datasources you have access to.

        The API will only return results from Datasources that are both *requested* in this parameter and *granted* to your API key. If this parameter is omitted, the search will run against all Datasources your key is granted to.
      schema:
        type: array
        items:
          type: string
        uniqueItems: true
      example: ["datasource_A"]

  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
      description: |
        API Key-based authentication. Each consumer must provide their unique API Key
        directly in the `Authorization` header for every request.

        **Example:** `Authorization: YOUR_API_KEY`

        API Keys can be obtained by contacting the system administrator.

  responses:
    BadRequest:
      description: "Bad Request - The request is missing a required parameter, includes an invalid parameter value, or is otherwise malformed."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: "INVALID_PARAMETER"
            message: "The 'top_k' parameter must be a positive integer."

    Unauthorized:
      description: "Unauthorized - The request lacks valid authentication credentials. The API Key is missing or invalid."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: "UNAUTHORIZED"
            message: "Authentication credentials were not provided or are invalid."

    Forbidden:
      description: "Forbidden - The server understood the request, but is refusing to fulfill it. The API Key is valid but lacks permission for the requested resource or datasource."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: "FORBIDDEN_DATASOURCE"
            message: "The provided API Key does not have access to the 'datasource_STF' datasource."

    NotFound:
      description: "Not Found - The requested resource could not be found."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: "RESOURCE_NOT_FOUND"
            message: "No Item found with the specified ID."```

security:
  - ApiKeyAuth: []

paths:
  /resolve-item-reference:
    get:
      tags:
        - "Discovery and Search Actions"
      summary: "Resolve a text reference to a ranked list of Item IDs."
      operationId: "resolveItemReference"
      description: |
        Translates an ambiguous, natural-language reference to an entity into a **ranked list of candidate** `Item` IDs.
        This is the critical first step for any query that names a specific entity (a document component, a concept, a named entity, etc.), acting as the bridge between user language and the graph's formal identifiers.

        ### Discussion
        This action is indispensable for grounding agentic workflows. References are often highly ambiguous ("Article 1") or relative ("the following paragraph").
        This function handles this by returning a ranked list of candidates rather than forcing a single, potentially incorrect guess.
        The optional `context_id` parameter significantly enhances its precision for context-aware interactions.

      security:
        - ApiKeyAuth: []

      parameters:
        - name: reference_text
          in: query
          required: true
          description: >-
            A string such as "Article 5 of the Constitution", "the Civil Code",
            or a relative reference like "the previous section".
          schema:
            type: string
          example: "Article 5 of the Constitution"
        - name: context_id
          in: query
          required: false
          description: >-
            Optional. The ID of an 'Item' to provide structural context. This helps
            resolve relative or ambiguous references.
          schema:
            $ref: '#/components/schemas/ID'
          example: "urn:lex:br:federal:constituicao:1988-10-05;1988"
        - name: top_k
          in: query
          required: false
          description: "The maximum number of candidate matches to return."
          schema:
            type: integer
            format: int32
            default: 3
            minimum: 1

        - $ref: '#/components/parameters/DatasourcesParameter'

      responses:
        '200':
          description: "A ranked list of probable Item matches was successfully returned."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResolvedEntityCandidate'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /resolve-theme-reference:
    get:
      tags:
        - "Discovery and Search Actions"
      summary: "Resolve a text reference to a ranked list of Theme IDs."
      operationId: "resolveThemeReference"
      description: |
        Translates a natural-language name or label for a legal theme into a **ranked list of candidate** `Theme` ids.
        This is the primary entry point for grounding a query in a specific conceptual category.
        
        ### Discussion
        This action is the conceptual counterpart to `resolveItemReference`. It performs entity linking for thematic nodes, allowing an agent to deterministically identify a theme mentioned by name before using it as a scope in other actions.

      security:
        - ApiKeyAuth: []

      parameters:
        - name: reference_text
          in: query
          required: true
          description: >-
            A string representing the name of a theme, such as "Social Security"
            or "Environmental Law".
          schema:
            type: string
          example: "Environmental Law"
        - name: top_k
          in: query
          required: false
          description: "The maximum number of candidate matches to return."
          schema:
            type: integer
            format: int32
            default: 3
            minimum: 1

        - $ref: '#/components/parameters/DatasourcesParameter'

      responses:
        '200':
          description: "A ranked list of probable Theme matches was successfully returned."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResolvedEntityCandidate'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /search-text-units:
    post:
      tags:
        - "Discovery and Search Actions"
      summary: "Performs a hybrid search for TextUnits."
      operationId: "searchTextUnits"
      description: |
        Performs a hybrid search to discover `TextUnit` nodes by combining semantic, lexical, and structured criteria, returning a ranked list of the most relevant results. This is the primary, optimized entry point for all standard RAG queries.

        ### Discussion
        This action's dual-mode design for scoping provides maximum flexibility.
        - **Conceptual Scope:** The most common mode. The agent defines the "what" (`item_ids`/`theme_ids`) and the "when" (`timestamp`), and the API handles the temporal resolution.
        - **Explicit Version Scope:** A powerful mode for programmatic workflows where an agent has already identified a specific set of `Version`s and needs to perform a semantic search exclusively within that curated set.

        The `aspects` parameter enables a truly holistic search, allowing a query to match a `Work`'s 'textual_metadata' just as easily as an `Version`'s 'canonical' text.

      security:
        - ApiKeyAuth: []

      requestBody:
        description: "The search criteria."
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'

      responses:
        '200':
          description: "Search executed successfully. Returns a ranked list of TextUnits."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SearchResultUnit'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /search-items:
    post:
      tags:
        - "Discovery and Search Actions"
      summary: "Performs a hybrid search for Items across their entire version history."
      operationId: "searchItems"
      description: |
        Performs a hybrid search to discover `Item` nodes by combining semantic, lexical, and structured criteria.
        This action is intentionally **time-agnostic**, searching across the entire version history of each item's text to ensure comprehensive discovery of the conceptual locus.

        ### Discussion
        This action's purpose is **structural discovery**, not content retrieval. It is used to find the *item* that, at any point in its history, has dealt with a concept. This is fundamentally different from `searchTextUnits`, which finds the specific *text* that was valid at a specific point in time.
      security:
        - ApiKeyAuth: []

      requestBody:
        description: "The search criteria for finding Items."
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                item_ids:
                  type: array
                  items: { $ref: '#/components/schemas/ID' }
                  description: "Optional. A list of 'Item' IDs to define the search scope."
                theme_ids:
                  type: array
                  items: { $ref: '#/components/schemas/ID' }
                  description: "Optional. A list of 'Theme' IDs to expand the search scope."
                item_metadata_filter:
                  $ref: '#/components/schemas/ItemMetadataFilterSchema'
                semantic_query:
                  type: string
                  description: "The natural language query string for vector search."
                lexical_query:
                  type: string
                  description: "Keywords or phrases for a full-text syntactic search."
                top_k:
                  type: integer
                  format: int32
                  default: 10
                  minimum: 1
                  description: "The maximum number of results to return."
                datasources:
                  $ref: '#/components/schemas/DatasourcesSchema'

      responses:
        '200':
          description: "Search executed successfully. Returns a ranked list of Items."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SearchedItemResult'
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }

  /search-themes:
    get:
      tags:
        - "Discovery and Search Actions"
      summary: "Performs a hybrid search for Themes based on their descriptions."
      operationId: "searchThemes"
      description: |
        Performs a hybrid (semantic and/or lexical) search to discover `Theme` nodes based on a descriptive query. 
        This action **searches exclusively on the textual descriptions associated with the themes themselves**.
        
        At least one of `semantic_query` or `lexical_query` must be provided.
        
        ### Discussion
        This action's purpose is to map a user's description of a topic to the most appropriate formal concept in the graph. 
        The design allows for both broad conceptual matching (via `semantic_query`) and high-precision keyword filtering (via `lexical_query`).
      security:
        - ApiKeyAuth: []

      parameters:
        - name: semantic_query
          in: query
          required: false
          description: "The natural language query string for vector-based semantic search."
          schema:
            type: string
            minLength: 1
          example: "laws about consumer protection"
        - name: lexical_query
          in: query
          required: false
          description: "Keywords or a specific phrase for a full-text syntactic search."
          schema:
            type: string
            minLength: 1
          example: "\"environmental impact report\""
        - name: top_k
          in: query
          required: false
          description: "The maximum number of candidate themes to return."
          schema:
            type: integer
            format: int32
            default: 5
            minimum: 1
        - $ref: '#/components/parameters/DatasourcesParameter'

      responses:
        '200':
          description: "A ranked list of matching Theme candidates was successfully returned."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResolvedEntityCandidate'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /items/{itemId}:
    get:
      tags:
        - "Deterministic Fetch Actions"
      summary: "Get a single Item by its canonical ID."
      operationId: "getItem"
      description: |
        Retrieves the full `Item` object given its unique, canonical ID.

        ### Discussion
        This is a core deterministic action. Unlike search functions, which are probabilistic, this is a direct, primary-key-based lookup. It either finds exactly one `Item` or returns a `404 Not Found` error. It is the primary way to "hydrate" an ID obtained from another function (like `searchItems` or `resolveItemReference`) into a full object.
      security:
        - ApiKeyAuth: []

      parameters:
        - name: itemId
          in: path
          required: true
          description: "The canonical ID of the Item to retrieve."
          schema:
            $ref: '#/components/schemas/ID'

      responses:
        '200':
          description: "Successfully retrieved the Item object."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'

        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /themes/{themeId}:
    get:
      tags:
        - "Deterministic Fetch Actions"
      summary: "Get a single Theme by its canonical ID."
      operationId: "getTheme"
      description: |
        Retrieves the full `Theme` object given its unique, canonical ID.

        ### Discussion
        This is a core deterministic action for retrieving a specific node from the classification ontology. It is a direct, primary-key-based lookup.
      security:
        - ApiKeyAuth: []

      parameters:
        - name: themeId
          in: path
          required: true
          description: "The canonical ID of the Theme to retrieve."
          schema:
            $ref: '#/components/schemas/ID'

      responses:
        '200':
          description: "Successfully retrieved the Theme object."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Theme'

        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /actions/{actionId}:
    get:
      tags:
        - "Deterministic Fetch Actions"
      summary: "Get a single Action by its unique ID."
      operationId: "getAction"
      description: |
        Retrieves the full `Action` data object given its unique identifier. This provides direct access to the details of a specific action, including its precise `source_version_id`, and the `Version`s it terminates and produces.
        
        ### Discussion
        This is a core deterministic action used for auditing and causal analysis. It allows an agent to inspect the exact event that caused a change in a legal norm's version history.
      security:
        - ApiKeyAuth: []

      parameters:
        - name: actionId
          in: path
          required: true
          description: "The unique identifier of the Action to retrieve."
          schema:
            $ref: '#/components/schemas/ID'

      responses:
        '200':
          description: "Successfully retrieved the Action object."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Action'

        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /versions/{versionId}:
    get:
      tags:
        - "Deterministic Fetch Actions"
      summary: "Get a single Version by its unique ID."
      operationId: "getVersion"
      description: "Retrieves the full `Version` object given its unique identifier. This is the primary way to inspect the details of a specific temporal snapshot of an Item."
      security:
        - ApiKeyAuth: []
      parameters:
        - name: versionId
          in: path
          required: true
          description: "The unique identifier of the Version to retrieve."
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: "Successfully retrieved the Version object."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Version'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /relations/{relationId}:
    get:
      tags:
        - "Deterministic Fetch Actions"
      summary: "Get a single Relation by its unique ID."
      operationId: "getRelation"
      description: "Retrieves the full `Relation` object given its unique identifier. Useful for inspecting the details of a specific link between entities."
      security:
        - ApiKeyAuth: []
      parameters:
        - name: relationId
          in: path
          required: true
          description: "The unique identifier of the Relation to retrieve."
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: "Successfully retrieved the Relation object."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Relation'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /text-units/{textUnitId}:
    get:
      tags:
        - "Deterministic Fetch Actions"
      summary: "Get a single TextUnit by its unique ID."
      operationId: "getTextUnit"
      description: |
        Retrieves the full `TextUnit` object given its unique identifier, including its content and all associated metadata.

        ### Discussion
        While the primary method for discovering `TextUnit`s is through the `searchTextUnits` function, this deterministic endpoint provides direct, primary-key-based access. It ensures API completeness, allowing a client to retrieve a specific text snippet if it only has its ID, which might occur in advanced logging or auditing workflows.
      security:
        - ApiKeyAuth: []

      parameters:
        - name: textUnitId
          in: path
          required: true
          description: "The unique identifier of the TextUnit to retrieve."
          schema:
            $ref: '#/components/schemas/ID'

      responses:
        '200':
          description: "Successfully retrieved the TextUnit object."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TextUnit'

        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /items/{itemId}/valid-version:
    get:
      tags:
        - "Deterministic Fetch Actions"
      summary: "Gets the single Version of an Item that was valid at a specific time."
      operationId: "getValidVersion"
      description: |
        The core temporal resolution function. It finds the single `Version` of a given `Item` that was legally in force at a specific point in time, according to a specified temporal policy.

        ### Discussion
        The explicit `policy` parameter is essential for guaranteeing determinism. It allows the agent to specify the exact temporal logic required, such as retrieving the last valid version within a day (`SnapshotLast`) or handling boundary conditions in a predictable manner (`PointInTime`).
      security:
        - ApiKeyAuth: []

      parameters:
        - name: itemId
          in: path
          required: true
          description: "The canonical ID of the Item whose valid version is being requested."
          schema:
            $ref: '#/components/schemas/ID'
        - name: timestamp
          in: query
          required: true
          description: "The specific UTC date-time for which to check validity."
          schema:
            type: string
            format: date-time
          example: "1999-06-01T12:00:00Z"
        - name: policy
          in: query
          required: false
          description: "The temporal resolution policy to apply."
          schema:
            $ref: '#/components/schemas/TemporalPolicy'

      responses:
        '200':
          description: "Successfully retrieved the unique Version object valid at the specified time."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Version'
        '404':
          description: "Not Found - Either the Item with the given ID does not exist, or it existed but had no version that was valid at the specified timestamp."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /versions/{versionId}/text-unit:
    get:
      tags:
        - "Deterministic Fetch Actions"
      summary: "Gets the specific TextUnit for a Version in a given language."
      operationId: "getTextForVersion"
      description: |
        Deterministically retrieves a specific textual representation (a `TextUnit`) for a single, known `Version` in a given language. This is a direct-access, primary-key-based lookup, not a search operation.

        ### Discussion
        This action is fundamentally different from `searchTextUnits`. While the latter is a probabilistic discovery tool, `getTextForVersion` is a deterministic fetch. It serves the critical use case where an agent has already identified a specific `Version` (e.g., via `getValidVersion`) and requires its exact textual content.
      security:
        - ApiKeyAuth: []

      parameters:
        - name: versionId
          in: path
          required: true
          description: "The unique identifier of the Version whose text is requested."
          schema:
            $ref: '#/components/schemas/ID'
        - name: language
          in: query
          required: true
          description: "The IETF BCP 47 language code for the desired text."
          schema:
            type: string
            pattern: "^[a-zA-Z]{2,3}(?:-[a-zA-Z0-9]+)*$" # Validação BCP 47
          example: "pt-BR"

      responses:
        '200':
          description: "Successfully retrieved the TextUnit object."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TextUnit'

        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: "Not Found - Either the Version with the given ID does not exist, or it does not have a textual representation in the requested language."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /enumerate-items:
    post:
      tags:
        - "Structural Navigation Actions"
      summary: "Enumerates Items within a structural or thematic scope."
      operationId: "enumerateItems"
      description: |
        Enumerates and returns full `Item` objects based on a specified structural or thematic scope. At least one of `item_ids` or `theme_ids` must be provided.

        ### Scope Logic
        - If both `item_ids` and `theme_ids` are provided, the function returns the **union** of all items found in both scopes (without duplicates).
        - The `depth` parameter applies exclusively to scopes defined by `item_ids`.

        ### Discussion
        This action's purpose is **structural enumeration and navigation**, not search filtering. It is the correct tool for tasks like building a table of contents or programmatically exploring the members of a conceptual theme. For performing content-based searches within a scope, agents should pass the scope's ID directly to the search functions (`searchTextUnits`, `searchItems`), as this is significantly more performant.
      security:
        - ApiKeyAuth: []

      requestBody:
        description: "The scope definition for the enumeration."
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnumerateItemsRequest'

      responses:
        '200':
          description: "A list of Item objects within the specified scope."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /items/{itemId}/ancestors:
    get:
      tags:
        - "Structural Navigation Actions"
      summary: "Retrieves the hierarchical ancestors of a single Item."
      operationId: "getAncestors"
      description: |
        Navigates the hierarchy upwards from a specific structural `Item` to its parent, grandparent, and so on, up to the root `Work`. This is crucial for retrieving the full contextual path ("breadcrumb") of any given provision.
        
        The returned list is **ordered** from the highest-level ancestor (e.g., a `Title`) down to the immediate parent of the input item. The root `Work` and the item itself are excluded from the list.
        
        ### Discussion
        This action is the fundamental tool for contextualization. After a search identifies a relevant item, an agent should use `getAncestors` to retrieve its structural path. This allows the generation of richer, context-aware responses, significantly improving the quality and explainability of the final answer.
      security:
        - ApiKeyAuth: []

      parameters:
        - name: itemId
          in: path
          required: true
          description: "The canonical ID of the Item whose ancestors are to be retrieved."
          schema:
            $ref: '#/components/schemas/ID'

      responses:
        '200':
          description: "An ordered list of the ancestor Item objects."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /items/{itemId}/themes:
    get:
      tags:
        - "Structural Navigation Actions"
      summary: "Retrieves all Themes associated with a single Item."
      operationId: "getThemesForItem"
      description: |
        Retrieves a list of all `Theme`s that are directly associated with a specific `Item`. This provides a direct inverse navigation from a structural entity to its classifications in the conceptual ontology.
        
        ### Discussion
        This action is the essential counterpart to using a `Theme` as a scope in `enumerateItems`. It makes the relationship between items and themes fully bidirectional, enabling an agent to efficiently answer questions like "What topics does this article cover?". Without this primitive, an agent would need to resort to a highly inefficient brute-force search across the entire thematic ontology.
      security:
        - ApiKeyAuth: []

      parameters:
        - name: itemId
          in: path
          required: true
          description: "The canonical ID of the Item whose thematic classifications are requested."
          schema:
            $ref: '#/components/schemas/ID'

      responses:
        '200':
          description: "A list of Theme objects associated with the Item. The list may be empty if the Item has no thematic classifications."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Theme'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /items/{itemId}/context:
    get:
      tags:
        - "Structural Navigation Actions"
      summary: "Retrieves the immediate structural context of an Item in a single call."
      operationId: "getItemContext"
      description: |
        Retrieves the complete, immediate structural context of a single `Item` in one efficient call. This includes its parent, siblings, and direct children.
        
        ### Discussion
        This is a high-utility, performance-oriented action designed for applications that need to render a contextual view of an item (e.g., a document browser or a table of contents). Replicating this functionality would require multiple, less efficient API calls (`getAncestors`, `enumerateItems`). By providing this as a single, atomic operation, the API dramatically simplifies the logic for common UI and agentic navigation tasks.
      security:
        - ApiKeyAuth: []

      parameters:
        - name: itemId
          in: path
          required: true
          description: "The canonical ID of the Item for which to retrieve the context."
          schema:
            $ref: '#/components/schemas/ID'

      responses:
        '200':
          description: "Successfully retrieved the structural context."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StructuralContext'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
