openapi: 3.0.3

info:
  title: "Canonical Action API for SAT-Graph RAG"
  version: "1.0.0"
  description: |
    This is the official OpenAPI 3.x specification for the **Canonical Action API**, 
    a formal, auditable interface for querying the Structure-Aware Temporal Graph (SAT-Graph).

    The complete architectural framework is proposed in the paper:
    - **[An Ontology-Driven Graph RAG for Legal Norms: A Structural, Temporal, and Deterministic Approach](https://arxiv.org/abs/2508.00827)**

    This API provides a library of atomic and composable actions that serve as the 
    fundamental building blocks for constructing reliable legal retrieval plans.

    **Authentication Note:** All endpoints in this API are protected. A valid API Key
    must be sent in the `Authorization` header on every request. Please refer to the
    'securitySchemes' section below for details.

    **Data Scoping Note:** The API serves data from multiple providers, called **Datasources**.
    All requests are automatically scoped to the Datasources granted to your API key.
    Many search functions also provide an optional `datasources` parameter for more granular filtering.

components:
  schemas:
    ID:
      $ref: './schemas/ID.yaml'
    JSON:
      $ref: './schemas/JSON.yaml'
    TimeInterval:
      $ref: './schemas/TimeInterval.yaml'
    Theme:
      $ref: './schemas/Theme.yaml'
    Item:
      $ref: './schemas/Item.yaml'
    Version:
      $ref: './schemas/Version.yaml'
    TextUnit:
      $ref: './schemas/TextUnit.yaml'
    Action:
      $ref: './schemas/Action.yaml'
    Relation:
      $ref: './schemas/Relation.yaml'

    TemporalPolicy:
      type: string
      description: |
        Specifies the temporal resolution logic for finding a valid version.
        This is essential for guaranteeing determinism when multiple events occur on the same day.

        - `PointInTime`: (Strict) Finds the version whose validity interval strictly contains the exact timestamp.
        - `SnapshotLast`: (Common) Finds the last version that was valid at any point during the day of the given timestamp. Treats the query as "what was the state of the law at the end of this day?".
      enum:
        - "PointInTime"
        - "SnapshotLast"
      default: "SnapshotLast"

    StructuralContext:
      type: object
      description: "Contains the complete, immediate structural context of a single Item."
      required:
        - target
      properties:
        target:
          $ref: '#/components/schemas/Item'
          description: "The full object of the item in question."
        parent:
          $ref: '#/components/schemas/Item'
          nullable: true
          description: "The full object of the item's immediate parent."
        siblings:
          type: array
          nullable: true
          description: "A list of full objects for the item's siblings (other items with the same parent)."
          items:
            $ref: '#/components/schemas/Item'
        children:
          type: array
          nullable: true
          description: "A list of full objects for the item's immediate children."
          items:
            $ref: '#/components/schemas/Item'

    ResolvedEntityCandidate:
      type: object
      description: "Represents a single candidate match for a resolved entity (e.g., an Item or a Theme)."
      required:
        - id
        - confidence
      properties:
        id:
          $ref: '#/components/schemas/ID'
          description: "The probable canonical ID of the matched entity."
        confidence:
          type: number
          format: float
          description: "A score from 0.0 to 1.0 indicating the certainty of the match."
          minimum: 0.0
          maximum: 1.0
          example: 0.95

    ErrorResponse:
      type: object
      description: A standard format for error responses.
      properties:
        code:
          type: string
          description: "An internal, machine-readable error code."
          example: "FORBIDDEN_DATASOURCE"
        message:
          type: string
          description: "A human-readable description of the error."
          example: "The provided API Key does not have access to the 'datasource_STF' datasource."

    ItemMetadataFilterSchema:
      type: object
      additionalProperties: true
      description: >-
        A set of key-value pairs to filter against the atemporal metadata of an 'Item'.
        The exact query capabilities (e.g., range queries, existence checks) depend on
        the backend implementation.
      example:
        jurisdiction: "federal"
        type: "Statute"

    MetadataFilter:
      type: object
      description: "A structured object for applying metadata-based filters."
      properties:
        item_metadata_filter:
          $ref: '#/components/schemas/ItemMetadataFilterSchema'
        version_metadata_filter:
          type: object
          additionalProperties: true
          description: "Key-value pairs to filter against the metadata of the 'Version'."
          example:
            publication_date: { ">=": "2010-01-01T00:00:00Z" }

    SearchRequest:
      type: object
      description: "The request body for the searchTextUnits operation."
      properties:
        version_ids:
          type: array
          items:
            $ref: '#/components/schemas/ID'
          description: >-
            Explicit Version Scope. A list of specific 'Version' IDs. Mutually
            exclusive with the combination of 'item_ids'/'theme_ids' and 'timestamp'.
        item_ids:
          type: array
          items:
            $ref: '#/components/schemas/ID'
          description: "Conceptual Scope. A list of 'Item' IDs to define the structural scope."
        theme_ids:
          type: array
          items:
            $ref: '#/components/schemas/ID'
          description: "Conceptual Scope. A list of 'Theme' IDs to define the thematic scope."
        metadata_filter:
          $ref: '#/components/schemas/MetadataFilter'
        timestamp:
          type: string
          format: date-time
          description: >-
            Conceptual Scope. A UTC date-time to constrain the search. Defaults to 'now' if omitted.
            Ignored if 'version_ids' is provided.
        semantic_query:
          type: string
          description: "The natural language query string for vector search."
        lexical_query:
          type: string
          description: "Keywords or phrases for a full-text syntactic search."
        language:
          type: string
          description: "The IETF BCP 47 language code for the content."
          example: "pt-BR"
        aspects:
          type: array
          items:
            type: string
          default: ["canonical"]
          description: "A list of textual aspects to search within (e.g., 'canonical', 'summary')."
        top_k:
          type: integer
          format: int32
          default: 10
          minimum: 1
          description: "The maximum number of results to return."
        datasources:
          $ref: '#/components/schemas/DatasourcesSchema'
          description: "Optional. Scopes the search to a specific list of granted datasources."

    SearchResultUnit:
      type: object
      description: "Represents a single search result, containing a TextUnit and its relevance score."
      required:
        - text_unit
        - score
      properties:
        text_unit:
          $ref: '#/components/schemas/TextUnit'
        score:
          type: number
          format: float
          description: "The relevance score of the result, typically between 0.0 and 1.0."
          minimum: 0.0
          maximum: 1.0

    SearchedItemResult:
      type: object
      description: "Represents a single search result, containing an Item and its relevance score."
      required:
        - item
        - score
      properties:
        item:
          $ref: '#/components/schemas/Item'
        score:
          type: number
          format: float
          description: "The relevance score of the result, typically between 0.0 and 1.0."
          minimum: 0.0
          maximum: 1.0

    DatasourcesSchema:
      type: array
      description: |
        A list of datasource identifiers. A datasource is the system or provider
        where an entity originates (e.g., 'datasource_Senate').
      items:
        type: string
      uniqueItems: true
      example: ["datasource_A"]

    EnumerateItemsRequest:
      type: object
      description: "Specifies the scope for enumerating Item objects."
      properties:
        item_ids:
          type: array
          items:
            $ref: '#/components/schemas/ID'
          description: "Optional. A list of 'Item' IDs to define a structural scope. The function will return these items and/or their descendants."
        theme_ids:
          type: array
          items:
            $ref: '#/components/schemas/ID'
          description: "Optional. A list of 'Theme' IDs to define a thematic scope. The function will return all member items of these themes."
        depth:
          type: integer
          description: >
            Controls traversal depth for 'item_ids' scopes. If `depth=1`, only direct children are returned. If omitted or negative, all descendants are returned recursively. This parameter is ignored for 'theme_ids' scopes.
          default: -1
        datasources:
          $ref: '#/components/schemas/DatasourcesSchema'

    GetRelationsRequest:
      type: object
      description: "Specifies the criteria for querying Relation objects. If 'entity_id' is omitted, the query runs against the entire corpus of relations."
      properties:
        entity_id:
          $ref: '#/components/schemas/ID'
          description: "Optional. The ID of an anchor entity. If provided, 'entity_type' is required."
        entity_type:
          type: string
          description: "Optional. The type of the anchor entity. Required only if 'entity_id' is provided."
          enum: [ "Item", "Version" ]
        predicate:
          type: string
          description: "Optional. Filters relations by a specific predicate (e.g., 'cites')."
        direction:
          type: string
          description: "Specifies the direction of the relations to retrieve relative to the 'entity_id'."
          enum: [ "forward", "backward", "both" ]
          default: "both"
        validity_interval_filter:
          type: object
          description: "Optional. Filters relations to those whose validity interval overlaps with the specified interval."
          properties:
            start_time:
              type: string
              format: date-time
            end_time:
              type: string
              format: date-time
        metadata_filter:
          type: object
          additionalProperties: true
          description: "Optional. Key-value pairs to filter against the 'metadata' of the Relation."
        datasources:
          $ref: '#/components/schemas/DatasourcesSchema'

  parameters:
    DatasourcesParameter:
      name: datasources
      in: query
      required: false
      description: |
        **Optional.** A list of identifiers for the Datasources to scope the search.

        A Datasource is the system or provider where an entity originates (e.g., 'datasource_Senate'). This parameter allows you to narrow a search to a specific subset of the Datasources you have access to.

        The API will only return results from Datasources that are both *requested* in this parameter and *granted* to your API key. If this parameter is omitted, the search will run against all Datasources your key is granted to.
      schema:
        type: array
        items:
          type: string
        uniqueItems: true
      example: ["datasource_A"]

  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
      description: |
        API Key-based authentication. Each consumer must provide their unique API Key
        directly in the `Authorization` header for every request.

        **Example:** `Authorization: YOUR_API_KEY`

        API Keys can be obtained by contacting the system administrator.

  responses:
    BadRequest:
      description: "Bad Request - The request is missing a required parameter, includes an invalid parameter value, or is otherwise malformed."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: "INVALID_PARAMETER"
            message: "The 'top_k' parameter must be a positive integer."

    Unauthorized:
      description: "Unauthorized - The request lacks valid authentication credentials. The API Key is missing or invalid."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: "UNAUTHORIZED"
            message: "Authentication credentials were not provided or are invalid."

    Forbidden:
      description: "Forbidden - The server understood the request, but is refusing to fulfill it. The API Key is valid but lacks permission for the requested resource or datasource."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: "FORBIDDEN_DATASOURCE"
            message: "The provided API Key does not have access to the 'datasource_STF' datasource."

    NotFound:
      description: "Not Found - The requested resource could not be found."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: "RESOURCE_NOT_FOUND"
            message: "No Item found with the specified ID."```

security:
  - ApiKeyAuth: []

paths:
  # --- items ---
  /items/{itemId}:
    $ref: './paths/items.yaml#~1items~1{itemId}'
  /items/{itemId}/ancestors:
    $ref: './paths/items.yaml#~1items~1{itemId}~1ancestors'
  /items/{itemId}/context:
    $ref: './paths/items.yaml#~1items~1{itemId}~1context'
  /items/{itemId}/themes:
    $ref: './paths/items.yaml#~1items~1{itemId}~1themes'
  /items/{itemId}/valid-version:
    $ref: './paths/items.yaml#~1items~1{itemId}~1valid-version'
  /enumerate-items:
    $ref: './paths/items.yaml#~1enumerate-items'
  /resolve-item-reference:
    $ref: './paths/items.yaml#~1resolve-item-reference'
  /search-items:
    $ref: './paths/items.yaml#~1search-items'

  # --- themes ---
  /themes/{themeId}:
    $ref: './paths/themes.yaml#~1themes~1{themeId}'
  /resolve-theme-reference:
    $ref: './paths/themes.yaml#~1resolve-theme-reference'
  /search-themes:
    $ref: './paths/themes.yaml#~1search-themes'

  # --- actions ---
  /actions/{actionId}:
    $ref: './paths/actions.yaml#~1actions~1{actionId}'

  # --- versions ---
  /versions/{versionId}:
    $ref: './paths/versions.yaml#~1versions~1{versionId}'
  /versions/{versionId}/text-unit:
    $ref: './paths/versions.yaml#~1versions~1{versionId}~1text-unit'

  # --- text-units ---
  /text-units/{textUnitId}:
    $ref: './paths/text-units.yaml#~1text-units~1{textUnitId}'
  /search-text-units:
    $ref: './paths/text-units.yaml#~1search-text-units'

  # --- relations ---
  /relations/{relationId}:
    $ref: './paths/relations.yaml#~1relations~1{relationId}'
  /query-relations:
    $ref: './paths/relations.yaml#~1query-relations'

  # --- entities ---
  /entities/{entityId}/related:
    $ref: './paths/entities.yaml#~1entities~1{entityId}~1related'

