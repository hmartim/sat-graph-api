get:
  tags:
    - "Structural Navigation Actions"
  summary: "Gets all Item IDs within the hierarchy of a given Item."
  operationId: "getItemHierarchy"
  description: |
    Enumerates and returns **Item IDs** for all items within the structural hierarchy of a specified Item. This is an efficient operation optimized for traversing hierarchies and collecting item references without the overhead of returning full Item objects.

    ### Use Cases
    This action is ideal for:
    - Traversing structural hierarchies to collect all descendant IDs
    - Building item ID lists for use in other operations (e.g., `/query-actions`, `search-items`)
    - Efficient batch processing where only IDs are needed
    - Hierarchical navigation with minimal payload overhead

    ### Discussion
    This action's purpose is **structural enumeration and navigation**, not search filtering. It is the correct tool for tasks like collecting all items in a subtree for further processing. For performing content-based searches within a scope, agents should pass the scope's ID directly to the search functions (`searchTextUnits`, `searchItems`), as this is significantly more performant.

    **Efficiency Note:** Returns only IDs (strings) rather than full Item objects, making it ideal for hierarchical traversal workflows where IDs are subsequently used in batch operations.
  security:
    - ApiKeyAuth: []

  parameters:
    - name: item_id
      in: path
      required: true
      description: The unique ID of the Item whose descendants should be retrieved.
      schema:
        $ref: '#/components/schemas/ID'
    - name: depth
      in: query
      required: false
      description: |
        Controls traversal depth. If `depth=1`, only direct children are returned. If omitted or negative, all descendants are returned recursively.
      schema:
        type: integer
        default: -1

  responses:
    '200':
      description: "A list of Item IDs (strings) within the hierarchy, ordered by hierarchical depth and position."
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ID'
    '400':
      $ref: '#/components/responses/BadRequest'
    '401':
      $ref: '#/components/responses/Unauthorized'
    '403':
      $ref: '#/components/responses/Forbidden'
    '404':
      $ref: '#/components/responses/NotFound'
