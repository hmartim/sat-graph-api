get:
  tags:
    - "Deterministic Fetch Actions"
  summary: "Gets the single Version of an Item that was valid at a specific time."
  operationId: "getValidVersion"
  description: |
    The core temporal resolution function. It finds the single `Version` of a given `Item` that was legally in force at a specific point in time, according to a specified temporal policy.

    ### Discussion
    The explicit `policy` parameter is essential for guaranteeing determinism. It allows the agent to specify the exact temporal logic required, such as retrieving the last valid version within a day (`SnapshotLast`) or handling boundary conditions in a predictable manner (`PointInTime`).
  security:
    - ApiKeyAuth: []

  parameters:
    - name: itemId
      in: path
      required: true
      description: "The canonical ID of the Item whose valid version is being requested."
      schema:
        $ref: '#/components/schemas/ID'
    - name: timestamp
      in: query
      required: true
      description: "The specific UTC date-time for which to check validity."
      schema:
        type: string
        format: date-time
      example: "1999-06-01T12:00:00Z"
    - name: policy
      in: query
      required: false
      description: |
        The temporal resolution policy to apply. If not specified, defaults to `SnapshotLast`.

        - `SnapshotLast` (default): Finds the last version valid at any point during the day of the timestamp
        - `PointInTime`: Finds the version whose validity interval strictly contains the exact timestamp
      schema:
        $ref: '#/components/schemas/TemporalPolicy'

  responses:
    '200':
      description: "Successfully retrieved the unique Version object valid at the specified time."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Version'
    '404':
      description: "Not Found - Either the Item with the given ID does not exist, or it existed but had no version that was valid at the specified timestamp."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    '400':
      $ref: '#/components/responses/BadRequest'
    '401':
      $ref: '#/components/responses/Unauthorized'
    '403':
      $ref: '#/components/responses/Forbidden'
