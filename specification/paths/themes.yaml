/themes/{themeId}:
  get:
    tags:
      - "Deterministic Fetch Actions"
    summary: "Get a single Theme by its canonical ID."
    operationId: "getTheme"
    description: |
      Retrieves the full `Theme` object given its unique, canonical ID.
      
      ### Discussion
      This is a core deterministic action for retrieving a specific node from the classification ontology. It is a direct, primary-key-based lookup.
    security:
      - ApiKeyAuth: []

    parameters:
      - name: themeId
        in: path
        required: true
        description: "The canonical ID of the Theme to retrieve."
        schema:
          $ref: '#/components/schemas/ID'

    responses:
      '200':
        description: "Successfully retrieved the Theme object."
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Theme'

      '401':
        $ref: '#/components/responses/Unauthorized'
      '403':
        $ref: '#/components/responses/Forbidden'
      '404':
        $ref: '#/components/responses/NotFound'

/resolve-theme-reference:
  get:
    tags:
      - "Discovery and Search Actions"
    summary: "Resolve a text reference to a ranked list of Theme IDs."
    operationId: "resolveThemeReference"
    description: |
      Translates a natural-language name or label for a legal theme into a **ranked list of candidate** `Theme` ids.
      This is the primary entry point for grounding a query in a specific conceptual category.
      
      ### Discussion
      This action is the conceptual counterpart to `resolveItemReference`. It performs entity linking for thematic nodes, allowing an agent to deterministically identify a theme mentioned by name before using it as a scope in other actions.

    security:
      - ApiKeyAuth: []

    parameters:
      - name: reference_text
        in: query
        required: true
        description: >-
          A string representing the name of a theme, such as "Social Security"
          or "Environmental Law".
        schema:
          type: string
        example: "Environmental Law"
      - name: top_k
        in: query
        required: false
        description: "The maximum number of candidate matches to return."
        schema:
          type: integer
          format: int32
          default: 3
          minimum: 1

      - $ref: '#/components/parameters/DatasourcesParameter'

    responses:
      '200':
        description: "A ranked list of probable Theme matches was successfully returned."
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ResolvedEntityCandidate'
      '400':
        $ref: '#/components/responses/BadRequest'
      '401':
        $ref: '#/components/responses/Unauthorized'
      '403':
        $ref: '#/components/responses/Forbidden'

/search-themes:
  get:
    tags:
      - "Discovery and Search Actions"
    summary: "Performs a hybrid search for Themes based on their descriptions."
    operationId: "searchThemes"
    description: |
      Performs a hybrid (semantic and/or lexical) search to discover `Theme` nodes based on a descriptive query. 
      This action **searches exclusively on the textual descriptions associated with the themes themselves**.
      
      At least one of `semantic_query` or `lexical_query` must be provided.
      
      ### Discussion
      This action's purpose is to map a user's description of a topic to the most appropriate formal concept in the graph. 
      The design allows for both broad conceptual matching (via `semantic_query`) and high-precision keyword filtering (via `lexical_query`).
    security:
      - ApiKeyAuth: []

    parameters:
      - name: semantic_query
        in: query
        required: false
        description: "The natural language query string for vector-based semantic search."
        schema:
          type: string
          minLength: 1
        example: "laws about consumer protection"
      - name: lexical_query
        in: query
        required: false
        description: "Keywords or a specific phrase for a full-text syntactic search."
        schema:
          type: string
          minLength: 1
        example: "\"environmental impact report\""
      - name: top_k
        in: query
        required: false
        description: "The maximum number of candidate themes to return."
        schema:
          type: integer
          format: int32
          default: 5
          minimum: 1
      - $ref: '#/components/parameters/DatasourcesParameter'

    responses:
      '200':
        description: "A ranked list of matching Theme candidates was successfully returned."
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ResolvedEntityCandidate'
      '400':
        $ref: '#/components/responses/BadRequest'
      '401':
        $ref: '#/components/responses/Unauthorized'
      '403':
        $ref: '#/components/responses/Forbidden'
