openapi: 3.0.3
info:
  title: SAT-Graph API
  version: 1.0.0
  description: |
    This is the official OpenAPI 3.x specification for the **SAT-Graph API**,
    a formal, auditable interface for querying the Structure-Aware Temporal Graph (SAT-Graph).

    The complete architectural framework is proposed in the paper:
    - **[An Ontology-Driven Graph RAG for Legal Norms: A Structural, Temporal, and Deterministic Approach](https://arxiv.org/abs/2508.00827)**

    ## API Architecture

    This specification implements a **two-layer architecture**:

    ### 1. Canonical Core API (Research Paper)
    The foundational set of actions formally specified in the research paper:
    - SAT-Graph ontology: Item, Version, Action, Theme, TextUnit
    - Temporal reasoning and deterministic retrieval
    - Structural navigation and causal tracing
    - Minimal set of composable primitives

    ### 2. Extended API (Production Enhancements)
    Additional capabilities for production use cases:
    - **Relation System**: Semantic overlay graph for cross-document relationships
      (citations, references, dependencies)
    - **Convenience Operations**: Optimized endpoints for common patterns
    - Implements "Future Directions" outlined in the research paper

    **Design Principle:** Extensions maintain the same guarantees of composability,
    auditability, and verifiability as the canonical core.

    ---

    **Authentication Note:** All endpoints in this API are protected. A valid API Key
    must be sent in the `Authorization` header on every request. Please refer to the
    'securitySchemes' section below for details.

    **Data Scoping Note:** The API serves data from multiple providers, called **Datasources**.
    All requests are automatically scoped to the Datasources granted to your API key.
    Many search functions also provide an optional `datasources` parameter for more granular filtering.
components:
  schemas:
    ID:
      type: string
      description: A generic, unique identifier for an entity within the SAT-Graph. This ID serves as the primary key for the entity. It is typically a formally structured string, such as a URN or URI, but is not strictly limited to those formats. It must be unique within the knowledge graph.
      minLength: 1
      example: urn:lex:br:federal:constituicao:1988-10-05
    JSON:
      description: Represents any valid JSON value. This can be a structured object, an array, a simple string, a number, a boolean, or null.
      oneOf:
        - type: object
          additionalProperties: true
        - type: array
          items: {}
        - type: string
        - type: number
        - type: boolean
        - type: 'null'
      examples:
        objectExample:
          summary: A complex JSON object
          value:
            publicationDetails:
              date: '1988-10-05'
              gazette: D.O.U.
        arrayExample:
          summary: A JSON array of tags
          value:
            - tag: social_rights
            - tag: constitution
        stringExample:
          summary: A simple JSON string
          value: Initial version as promulgated.
        numberExample:
          summary: A simple JSON number
          value: 1988
        booleanExample:
          summary: A simple JSON boolean
          value: true
    TimeInterval:
      type: array
      description: |
        Represents a time interval defined by a start date-time and an optional end date-time. All values must conform to the RFC 3339 'date-time' format (e.g., 'YYYY-MM-DDTHH:mm:ssZ').
        **To represent a whole day, use the beginning of that day in UTC.** For example, the date '1988-10-05' should be represented as '1988-10-05T00:00:00Z'.
      minItems: 2
      maxItems: 2
      items:
        type: string
        format: date-time
        nullable: true
      examples:
        closedInterval:
          summary: A closed interval with a start and end time
          description: Used for a version that has been superseded by another.
          value:
            - '1988-10-05T00:00:00Z'
            - '2000-02-13T23:59:59Z'
        openEndedInterval:
          summary: An open-ended interval for a current version
          description: The end time is explicitly null, indicating the version is still legally valid. This is the recommended representation for open intervals.
          value:
            - '2000-02-14T00:00:00Z'
            - null
    TemporalPolicy:
      type: string
      description: |
        Specifies the temporal resolution logic for finding a valid version.
        This is essential for guaranteeing determinism when multiple events occur on the same day.

        - `PointInTime`: (Strict) Finds the version whose validity interval strictly contains the exact timestamp.
        - `SnapshotLast`: (Common) Finds the last version that was valid at any point during the day of the given timestamp. Treats the query as "what was the state of the law at the end of this day?".
      enum:
        - PointInTime
        - SnapshotLast
      default: SnapshotLast
    DatasourcesSchema:
      type: array
      description: |
        A list of datasource identifiers. A datasource is the system or provider
        where an entity originates (e.g., 'datasource_Senate').
      items:
        type: string
      uniqueItems: true
      example:
        - datasource_A
    MetadataFilter:
      type: object
      description: A structured object for applying metadata-based filters.
      properties:
        item_metadata_filter:
          type: object
          additionalProperties: true
          description: A set of key-value pairs to filter against the atemporal metadata of an 'Item'. The exact query capabilities (e.g., range queries, existence checks) depend on the backend implementation.
          example:
            jurisdiction: federal
            type: Statute
        version_metadata_filter:
          type: object
          additionalProperties: true
          description: Key-value pairs to filter against the metadata of the 'Version'.
          example:
            publication_date:
              '>=': '2010-01-01T00:00:00Z'
    ItemMetadataFilterSchema:
      type: object
      additionalProperties: true
      description: A set of key-value pairs to filter against the atemporal metadata of an 'Item'. The exact query capabilities (e.g., range queries, existence checks) depend on the backend implementation.
      example:
        jurisdiction: federal
        type: Statute
    Item:
      type: object
      description: |
        Represents a timeless, foundational entity within the SAT Graph. An 'Item' acts as a stable, version-agnostic anchor for a specific concept.
        While its primary role is to model the formal structure of a document (as a 'Work' or 'Work Component'), it is flexible enough to represent other key entities, such as: - **Defined Terms:** A specific term (e.g., 'Complementary Law'). - **Abstract Concepts:** A legal or procedural concept (e.g., 'Revocation', 'Due Process'). - **Named Entities:** A real-world entity like an organization or location (e.g., 'National Congress').
        The 'Item' itself is just a structural and conceptual anchor. Its semantic meaning and textual content are provided by associated 'TextUnit' objects, typically with an aspect like 'description', 'summary'.
      required:
        - id
        - type_id
        - label
      properties:
        id:
          $ref: ../core/ID.yaml
        uri:
          type: string
          nullable: true
          description: The canonical URI/URN for this Item. In legal contexts, typically follows the LEX URN standard (e.g., urn:lex:br:federal:constituicao:1988-10-05;art5). This provides stable identification for citations, external references, and cross-system interoperability, persisting even if the surrogate ID changes.
          minLength: 1
          example: urn:lex:br:federal:constituicao:1988-10-05;art5
        type_id:
          $ref: ../core/ID.yaml
          description: |-
            The unique identifier of the ItemType that classifies this item. This references an ItemType entity that defines the formal type within the taxonomy (e.g., "Constitution", "Article", "Paragraph").
            The ItemType taxonomy enables validation, navigation, and rich metadata about type relationships and constraints.
          example: item-type:123456
        label:
          type: string
          description: The human-readable label or title for the item.
          minLength: 1
          example: Brazilian Constitution of 1988
        parent:
          $ref: ../core/ID.yaml
          nullable: true
          description: The canonical ID of the single structural parent of this item. This field is primarily relevant for 'Work Component' items to define the document hierarchy. For other categories like 'Concept' or 'Term', it may be used to build a taxonomy.
        children:
          type: array
          nullable: true
          description: An optional list of canonical IDs for the immediate children of this item. Primarily used to define the document hierarchy for 'Work' and 'Work Component' items.
          items:
            $ref: ../core/ID.yaml
        metadata:
          $ref: ../core/JSON.yaml
          nullable: true
          description: |-
            A flexible field for any valid JSON data. Used for storing structured, atemporal properties of the item, such as jurisdiction, publication data, or other domain-specific attributes that don't fit into the other fields.
            This approach is exemplified in this paper, that proposes a structured  metadata description for legal norm's "Work": [Legal Knowledge Graph Foundations, Part- I: URI-Addressable Abstract Works (LRMoo F1 to schema.org)](https://arxiv.org/abs/2508.00827).
    Version:
      type: object
      description: |
        Represents a specific, time-bound version of an Item (a TV/CTV). It captures the semantic state and structural position of an item at a specific point in time, but is language-agnostic and contains no direct textual content.
      required:
        - id
        - item_id
        - validity_interval
      properties:
        id:
          $ref: ../core/ID.yaml
          description: A unique identifier for this specific version instance.
          example: urn:lex:br:federal:constituicao:1988@1988-10-05
        uri:
          type: string
          nullable: true
          description: The canonical URI/URN for this Version. Typically extends the Item's URI with temporal information (e.g., @2020-01-15 suffix). This enables precise temporal citations and version tracking across systems, providing stable identification that persists even if the surrogate ID changes.
          minLength: 1
          example: urn:lex:br:federal:constituicao:1988-10-05;art5@2020-01-15
        item_id:
          $ref: ../core/ID.yaml
          description: The ID of the timeless 'Item' this object is a version of.
          example: urn:lex:br:federal:constituicao:1988
        validity_interval:
          $ref: ../core/TimeInterval.yaml
          description: The time interval during which this version was legally valid.
        parent:
          type: array
          nullable: true
          description: A list of IDs for the parent 'Version'(s) that include this Version as a component. A Version can have multiple parents because, under the SAT-Graph's aggregation model, an unchanged child Version is reused across multiple subsequent parent Versions. A 'Work' version has no parents.
          items:
            $ref: ../core/ID.yaml
        children:
          type: array
          nullable: true
          description: A list of IDs for the children 'Version's. It is composed by aggregating the most recent valid versions of all its child components, some of which may be newly created while others are reused from previous states.
          items:
            $ref: ../core/ID.yaml
        metadata:
          $ref: ../core/JSON.yaml
          nullable: true
          description: A flexible field for any valid JSON data specific to this version.
    Theme:
      type: object
      description: |
        Represents an atemporal, conceptual entity used to classify Items and organize knowledge. Themes form a taxonomy (e.g., "Social Security" is a child of "Public Law") and serve as entry points for curated, topic-based searches.
      required:
        - id
        - label
      properties:
        id:
          $ref: ../core/ID.yaml
        uri:
          type: string
          nullable: true
          description: The canonical URI/URN for this Theme. This provides a stable, semantic identifier that persists even if the surrogate ID changes. Useful for external references, ontology mapping, cross-system interoperability, and semantic web integration.
          minLength: 1
          example: urn:example:theme:social-security
        label:
          type: string
          description: The human-readable name or label for the theme.
          example: Social Security
        parent:
          type: array
          nullable: true
          description: An optional list of IDs of broader themes in the taxonomy. A theme can have multiple parents to support poly-hierarchical classification.
          items:
            $ref: ../core/ID.yaml
          example:
            - urn:lex:br:federal:tema:direito.publico
        children:
          type: array
          nullable: true
          description: An optional list of IDs of more specific themes in the taxonomy.
          items:
            $ref: ../core/ID.yaml
          example:
            - urn:lex:br:federal:tema:pensoes
            - urn:lex:br:federal:tema:saude
        members:
          type: array
          description: A list of IDs of the 'Item's that are classified under this theme. The list can be empty if the theme serves only as a structural node in the taxonomy.
          items:
            $ref: ../core/ID.yaml
          example:
            - urn:lex:br:federal:constituicao:1988-10-05!artX
            - urn:lex:br:federal:lei:2025-05-14;abc
        metadata:
          $ref: ../core/JSON.yaml
          nullable: true
          description: A flexible field for any valid JSON data. Used for storing structured properties of the theme, such as scope, domain-specific attributes, or additional classification information that doesn't fit into other fields.
    ItemType:
      type: object
      description: |
        Represents a classification type in the Item taxonomy. ItemTypes form a poly-hierarchical structure that defines the formal type system for Items. For example, in the legal domain, "Article" is a type of "Work Component" that can contain "Paragraphs" and "Sections".
        ItemTypes enable: - Validation of Item hierarchies (e.g., an Article can only contain Paragraphs) - Rich metadata about types (icons, levels, constraints) - Multilingual descriptions via associated TextUnits (using aspects like 'description', 'summary') - Discovery and navigation of the type system
      required:
        - id
        - label
        - category
      properties:
        id:
          $ref: ../core/ID.yaml
          description: The unique identifier for this ItemType. May be a surrogate ID (auto-generated) or a semantic identifier.
          example: item-type:123456
        uri:
          type: string
          nullable: true
          description: The canonical URI/URN for this ItemType. This provides a stable, semantic identifier that persists even if the surrogate ID changes. Useful for external references, exports, and semantic web integration.
          minLength: 1
          example: urn:lex:type:article
        label:
          type: string
          description: The human-readable name or label for this type.
          minLength: 1
          example: Article
        category:
          type: string
          description: The architectural category that this type belongs to. This provides a high-level classification that groups related types.
          minLength: 1
          enum:
            - Work
            - Work Component
            - Term
            - Concept
            - Named Entity
          example: Work Component
        parent:
          type: array
          nullable: true
          description: An optional list of IDs of broader types in the taxonomy. An ItemType can have multiple parents to support poly-hierarchical classification (e.g., "Legal Provision" might be both a "Work Component" and a "Normative Content").
          items:
            $ref: ../core/ID.yaml
          example:
            - item-type:work-component
        children:
          type: array
          nullable: true
          description: An optional list of IDs of more specific types in the taxonomy. For example, "Article" might have children "Paragraph", "Section", "Sole Paragraph".
          items:
            $ref: ../core/ID.yaml
          example:
            - item-type:paragraph
            - item-type:section
            - item-type:sole-paragraph
        metadata:
          $ref: ../core/JSON.yaml
          nullable: true
          description: |-
            A flexible field for any valid JSON data. Used for storing type-specific properties such as validation rules, UI hints, structural constraints, or other domain-specific attributes.
            Examples: - Validation rules: which types can contain which other types - UI hints: icons, colors, display order - Structural constraints: max depth, numbering schemes - Legal semantics: normative weight, citation formats
          example:
            level: 2
            icon: 📄
            allowed_children:
              - paragraph
              - section
            numbering_scheme: sequential
    TextUnit:
      type: object
      description: |
        Represents a concrete piece of textual information. It is a flexible object used to hold any aspect of text associated with a primary entity in the graph.
      required:
        - id
        - source_type
        - source_id
        - language
        - aspect
        - content
      properties:
        id:
          $ref: ../core/ID.yaml
          description: A unique identifier for this specific piece of text.
          example: urn:lex:br:federal:constituicao:1988@1988-10-05~text;pt!art1_par1
        source_type:
          type: string
          description: The type of the source node in the graph to which this text is attached. This provides essential context for the retrieved text.
          enum:
            - Theme
            - Item
            - Version
            - Action
            - Relation
          example: Version
        source_id:
          $ref: ../core/ID.yaml
          description: The unique ID of the source node.
          example: urn:lex:br:federal:constituicao:1988@1988-10-05!art1_par1
        language:
          type: string
          description: The language of the content, specified as an IETF BCP 47 tag.
          pattern: ^[a-zA-Z]{2,3}(?:-[a-zA-Z0-9]+)*$
          example: pt-BR
        aspect:
          type: string
          description: |-
            The semantic role of the text relative to its source node, forming the core of the multi-aspect retrieval model. The `canonical` aspect is special; it represents a segment of the official text of a document (e.g. legal provision,  i.e., the content of a legal norm's component). It is associated with a `Version`. Other aspects represent secondary or descriptive texts about a node. `textual_metadata` is a representation in natural language of object's metadata and allow semantic filters in their contents (structured metadata can also be declared  in `Item` and `Version`, to ensure deterministic filters). `textual_relation` is a representation in natural language of object's relation and allow semantic filters in their contents--this approach is described in the:
                  [SAT Graph RAG paper)](https://arxiv.org/abs/2505.00039).
            `indexical` is a alterative identifier or name (surname) that can be used in semantic reference search--this approach is proposed in:
                  [Poly-Vector Retrieval: Reference and Content Embeddings for Legal Documents)](https://arxiv.org/abs/2504.10508).

            The enumerated values represent a baseline set of common aspects. A concrete implementation of the SAT-Graph may extend this list with additional, domain-specific aspects.
          pattern: ^[a-z_]+$
          enum:
            - canonical
            - description
            - summary
            - textual_metadata
            - textual_relation
            - indexical
          example: canonical
        content:
          type: string
          minLength: 1
          description: |-
            The raw textual content of this unit. This content can be a direct segment from the raw document or a segment with complete semantics-- this approach is proposed in:
                  [Unlocking Legal Knowledge with Multi-Layered Embedding-Based Retrieval](https://arxiv.org/abs/2411.07739).
          example: Todo o poder emana do povo, que o exerce por meio de representantes eleitos ou diretamente, nos termos desta Constituição.
    Action:
      type: object
      description: |
        Represents a reified event (e.g., an amendment, a revocation). 
         
        It is important to clarify the scope of "causality" within this framework.  For exemple, in legislative domain, we address the chain of events that determine  the textual validity of a legal provision at a specific point in time  (causality in the textual-documentary world). This is distinct from the legal-dogmatic  concept of causality, which typically refers to the relationship between a real-world  event (the operative fact) and the legal norm that applies to it.
        It is a first-class entity that models a single, auditable causal link, connecting the source of a command to its precise effects on the version history of an Item.
      required:
        - id
        - type
        - date
        - source_version_id
        - produces_version_id
      properties:
        id:
          $ref: ../core/ID.yaml
          description: A unique identifier for this specific legislative action.
          example: urn:lex:br:federal:emenda.constitucional:2000-02-14;26@2000-02-14!art1_cpt_alt1_art6_cpt
        type:
          type: string
          description: The type of legislative action. The enumerated values represent a baseline set; a concrete implementation may extend this list.
          enum:
            - Amendment
            - Revocation
            - Creation
            - Repeal
          example: Amendment
        date:
          type: string
          format: date-time
          description: The effective date and time of the action, in UTC.
          example: '2000-02-14T00:00:00Z'
        source_version_id:
          $ref: ../core/ID.yaml
          description: The ID of the specific 'Version' of the legal text that **authorizes** or **commands** this single change. This is the source of the causal link.
          example: urn:lex:br:federal:emenda.constitucional:2000-02-14;26@2000-02-14!art1_cpt_alt1_art6_cpt
        terminates_version_id:
          $ref: ../core/ID.yaml
          nullable: true
          description: The ID of the specific 'Version' whose validity is **terminated** by this action. This is optional and will be null for original enactments (Creations).
          example: urn:lex:br:federal:constituicao:1988-10-05;1988@1988-10-05!art6_cpt
        produces_version_id:
          $ref: ../core/ID.yaml
          description: The ID of the specific 'Version' that is **created** by this action.
          example: urn:lex:br:federal:constituicao:1988-10-05;1988@2000-02-14!art6_cpt
        metadata:
          $ref: ../core/JSON.yaml
          nullable: true
          description: A flexible field for any valid JSON data providing more context about the action, such as its source of the assertion.
    Relation:
      type: object
      description: |
        Represents a directed, typed, and potentially time-bound link between two entities in the graph (Items or Versions). This polymorphic design allows for modeling a rich web of interactions, distinguishing between timeless conceptual links and time-bound references embedded in text. The optional 'validity_interval' allows for modeling temporal relationships that are only true for a specific period.
      required:
        - id
        - source_type
        - source_id
        - predicate
        - target_type
        - target_id
      properties:
        id:
          $ref: ../core/ID.yaml
          description: A unique identifier for this specific relation instance.
        source_type:
          type: string
          description: The type of the entity at the source of the relation.
          enum:
            - Item
            - Version
          example: Item
        source_id:
          $ref: ../core/ID.yaml
          description: The ID of the source entity.
          example: urn:lex:br:federal:constituicao:1988-10-05;1988
        predicate:
          type: string
          description: The type of the relationship. This defines the semantics of the link. The enumerated values represent a baseline set; a concrete implementation may extend this list with a more detailed vocabulary or ontology.
          enum:
            - succeeds
            - related_to
            - applies_to
            - cites
            - defined_in
          example: succeeds
        target_type:
          type: string
          description: The type of the entity at the target of the relation.
          enum:
            - Item
            - Version
          example: Item
        target_id:
          $ref: ../core/ID.yaml
          description: The ID of the target entity.
          example: urn:lex:br:federal:constituicao:1967-01-24;1967
        validity_interval:
          $ref: ../core/TimeInterval.yaml
          nullable: true
          description: The time interval during which this relation is valid. If null, the relation is considered atemporal.
          example:
            - '2020-03-15T00:00:00Z'
            - '2020-09-15T23:59:59Z'
        metadata:
          $ref: ../core/JSON.yaml
          nullable: true
          description: A flexible field for any valid JSON data providing more context about the relation, such as its own validity interval or source of the assertion.
    SearchItemsRequest:
      type: object
      description: |
        The request body for the searchItems operation.

        **Filter Logic:**
        - If both `categories` and `item_type_ids` are provided, only items satisfying BOTH conditions are included (AND logic).
        - These explicit filters are more efficient than using `item_metadata_filter` for category/type filtering.
      properties:
        item_ids:
          type: array
          items:
            $ref: ../core/ID.yaml
          description: Optional. A list of 'Item' IDs to define the search scope.
        theme_ids:
          type: array
          items:
            $ref: ../core/ID.yaml
          description: Optional. A list of 'Theme' IDs to expand the search scope.
        categories:
          type: array
          items:
            type: string
            enum:
              - Work
              - Work Component
              - Term
              - Concept
              - Named Entity
          description: |
            Optional. Filter search results to only items with the specified categories. When combined with `item_type_ids`, both filters must be satisfied (AND logic). More efficient than using `item_metadata_filter` for category filtering.
          example:
            - Work Component
        item_type_ids:
          type: array
          items:
            $ref: ../core/ID.yaml
          description: |
            Optional. Filter search results to only items of the specified types. When combined with `categories`, both filters must be satisfied (AND logic). More efficient than using `item_metadata_filter` for type filtering.
          example:
            - item-type:article
            - item-type:paragraph
        item_metadata_filter:
          $ref: ../common/ItemMetadataFilterSchema.yaml
        semantic_query:
          type: string
          description: The natural language query string for vector search.
        lexical_query:
          type: string
          description: Keywords or phrases for a full-text syntactic search.
        top_k:
          type: integer
          format: int32
          default: 10
          minimum: 1
          description: The maximum number of results to return.
        datasources:
          $ref: ../common/DatasourcesSchema.yaml
    SearchTextUnitsRequest:
      type: object
      description: |
        The request body for the searchTextUnits operation.

        **Parameter Modes (Mutually Exclusive):**

        **Mode 1: Explicit Version Scope**
        - Use `version_ids` to search within a specific set of versions
        - `item_ids`, `theme_ids`, and `timestamp` are ignored when `version_ids` is provided

        **Mode 2: Conceptual Scope with Temporal Resolution**
        - Use `item_ids` and/or `theme_ids` to define scope
        - Use `timestamp` to constrain temporally (defaults to "now" if omitted)
        - `version_ids` must be omitted in this mode

        You cannot mix `version_ids` with `item_ids`/`theme_ids`/`timestamp`. Choose one mode per request.
      properties:
        version_ids:
          type: array
          items:
            $ref: ../core/ID.yaml
          description: |
            **Mode 1: Explicit Version Scope**
            A list of specific Version IDs to search within.
            When provided, `item_ids`, `theme_ids`, and `timestamp` are ignored.
        item_ids:
          type: array
          items:
            $ref: ../core/ID.yaml
          description: |
            **Mode 2: Conceptual Scope**
            A list of Item IDs to define the structural scope.
            Cannot be used with `version_ids`.
        theme_ids:
          type: array
          items:
            $ref: ../core/ID.yaml
          description: |
            **Mode 2: Conceptual Scope**
            A list of Theme IDs to define the thematic scope.
            Cannot be used with `version_ids`.
        metadata_filter:
          $ref: ../common/MetadataFilter.yaml
        timestamp:
          type: string
          format: date-time
          description: |
            **Mode 2: Conceptual Scope**
            A UTC date-time to constrain the search temporally. Defaults to 'now' if omitted.
            Cannot be used with `version_ids`.
        semantic_query:
          type: string
          description: The natural language query string for vector search.
        lexical_query:
          type: string
          description: Keywords or phrases for a full-text syntactic search.
        language:
          type: string
          description: The IETF BCP 47 language code for the content.
          example: pt-BR
        aspects:
          type: array
          items:
            type: string
          default:
            - canonical
          description: A list of textual aspects to search within (e.g., 'canonical', 'summary').
        top_k:
          type: integer
          format: int32
          default: 10
          minimum: 1
          description: The maximum number of results to return.
        datasources:
          $ref: ../common/DatasourcesSchema.yaml
          description: Optional. Scopes the search to a specific list of granted datasources.
    EnumerateItemsRequest:
      type: object
      description: |
        Specifies the scope and filters for enumerating Item objects.

        **Filter Logic:**
        - If both `categories` and `item_type_ids` are provided, items must satisfy BOTH conditions (AND logic).
        - Filters are applied after scope resolution (item_ids/theme_ids/depth).
      properties:
        item_ids:
          type: array
          items:
            $ref: ../core/ID.yaml
          description: Optional. A list of 'Item' IDs to define a structural scope. The function will return these items and/or their descendants.
        theme_ids:
          type: array
          items:
            $ref: ../core/ID.yaml
          description: Optional. A list of 'Theme' IDs to define a thematic scope. The function will return all member items of these themes.
        depth:
          type: integer
          description: |
            Controls traversal depth for 'item_ids' scopes. If `depth=1`, only direct children are returned. If omitted or negative, all descendants are returned recursively. This parameter is ignored for 'theme_ids' scopes.
          default: -1
        categories:
          type: array
          items:
            type: string
            enum:
              - Work
              - Work Component
              - Term
              - Concept
              - Named Entity
          description: |
            Optional. Filter results to only items with the specified categories. When combined with `item_type_ids`, both filters must be satisfied (AND logic).
          example:
            - Work Component
        item_type_ids:
          type: array
          items:
            $ref: ../core/ID.yaml
          description: |
            Optional. Filter results to only items of the specified types (references to ItemType entities). When combined with `categories`, both filters must be satisfied (AND logic).
          example:
            - item-type:article
            - item-type:paragraph
        datasources:
          $ref: ../common/DatasourcesSchema.yaml
    GetRelationsRequest:
      type: object
      description: Specifies the criteria for querying Relation objects. If 'entity_id' is omitted, the query runs against the entire corpus of relations.
      properties:
        entity_id:
          $ref: ../core/ID.yaml
          description: Optional. The ID of an anchor entity. If provided, 'entity_type' is required.
        entity_type:
          type: string
          description: Optional. The type of the anchor entity. Required only if 'entity_id' is provided.
          enum:
            - Item
            - Version
        predicate:
          type: string
          description: Optional. Filters relations by a specific predicate (e.g., 'cites').
        direction:
          type: string
          description: Specifies the direction of the relations to retrieve relative to the 'entity_id'.
          enum:
            - forward
            - backward
            - both
          default: both
        validity_interval_filter:
          type: object
          description: Optional. Filters relations to those whose validity interval overlaps with the specified interval.
          properties:
            start_time:
              type: string
              format: date-time
            end_time:
              type: string
              format: date-time
        metadata_filter:
          type: object
          additionalProperties: true
          description: Optional. Key-value pairs to filter against the 'metadata' of the Relation.
        datasources:
          $ref: ../common/DatasourcesSchema.yaml
    GetBatchActionsRequest:
      type: object
      description: Specifies the criteria for retrieving a batch of Action objects.
      required:
        - ids
      properties:
        ids:
          type: array
          description: A list of unique identifiers for the Actions to retrieve.
          items:
            $ref: ../core/ID.yaml
          minItems: 1
          uniqueItems: true
        datasources:
          description: |
            Optional. A list of datasource identifiers to scope the query.

            **Note:** This parameter is a security/scoping feature applied consistently
            across all batch operations, though not specified in the canonical model.
            It filters results to only those from authorized datasources.
          $ref: ../common/DatasourcesSchema.yaml
    GetBatchItemsRequest:
      type: object
      description: Specifies the criteria for retrieving a batch of Item objects.
      required:
        - ids
      properties:
        ids:
          type: array
          description: A list of canonical IDs for the Items to retrieve.
          items:
            $ref: ../core/ID.yaml
          minItems: 1
          uniqueItems: true
        datasources:
          description: |
            Optional. A list of datasource identifiers to scope the query.

            **Note:** This parameter is a security/scoping feature applied consistently
            across all batch operations, though not specified in the canonical model.
            It filters results to only those from authorized datasources.
          $ref: ../common/DatasourcesSchema.yaml
    GetBatchValidVersionsRequest:
      type: object
      description: Specifies the criteria for retrieving a batch of valid Version objects.
      required:
        - item_ids
        - timestamp
      properties:
        item_ids:
          type: array
          description: A list of canonical IDs for the Items whose valid versions are requested.
          items:
            $ref: ../core/ID.yaml
          minItems: 1
          uniqueItems: true
        timestamp:
          type: string
          format: date-time
          description: The specific UTC date-time for which to check validity for all items.
        policy:
          $ref: ../core/TemporalPolicy.yaml
          description: The temporal resolution policy to apply uniformly to all items.
        datasources:
          description: |
            Optional. A list of datasource identifiers to scope the query.

            **Note:** This parameter is a security/scoping feature applied consistently
            across all batch operations, though not specified in the canonical model.
            It filters results to only those from authorized datasources.
          $ref: ../common/DatasourcesSchema.yaml
    SummarizeImpactRequest:
      type: object
      description: |
        Specifies the criteria for summarizing impact.

        **Filter Logic:**
        - If both `categories` and `item_type_ids` are provided, only items satisfying BOTH conditions are included (AND logic).
        - All filters (categories, item_type_ids, action_types) are combined with AND logic.
      required:
        - time_interval
      properties:
        item_ids:
          type: array
          items:
            $ref: ../core/ID.yaml
          description: Optional. A list of 'Item' IDs to define the structural scope of the analysis.
        theme_ids:
          type: array
          items:
            $ref: ../core/ID.yaml
          description: Optional. A list of 'Theme' IDs to define the thematic scope of the analysis.
        time_interval:
          $ref: ../core/TimeInterval.yaml
          description: A start and end UTC date-time for the analysis window.
        categories:
          type: array
          items:
            type: string
            enum:
              - Work
              - Work Component
              - Term
              - Concept
              - Named Entity
          description: |
            Optional. Filter impact analysis to only items with the specified categories. When combined with `item_type_ids`, both filters must be satisfied (AND logic).
          example:
            - Work Component
        item_type_ids:
          type: array
          items:
            $ref: ../core/ID.yaml
          description: |
            Optional. Filter impact analysis to only items of the specified types. When combined with `categories`, both filters must be satisfied (AND logic).
          example:
            - item-type:article
            - item-type:paragraph
        action_types:
          type: array
          items:
            type: string
            enum:
              - Amendment
              - Revocation
              - Creation
              - Repeal
          description: Optional. Filters the summary to specific action types. If omitted, all action types are included.
        datasources:
          $ref: ../common/DatasourcesSchema.yaml
    StructuralContext:
      type: object
      description: Contains the complete, immediate structural context of a single Item.
      required:
        - target
      properties:
        target:
          $ref: ../entities/Item.yaml
          description: The full object of the item in question.
        parent:
          $ref: ../entities/Item.yaml
          nullable: true
          description: The full object of the item's immediate parent.
        siblings:
          type: array
          nullable: true
          description: A list of full objects for the item's siblings (other items with the same parent).
          items:
            $ref: ../entities/Item.yaml
        children:
          type: array
          nullable: true
          description: A list of full objects for the item's immediate children.
          items:
            $ref: ../entities/Item.yaml
    ResolvedEntityCandidate:
      type: object
      description: Represents a single candidate match for a resolved entity (e.g., an Item or a Theme).
      required:
        - id
        - confidence
      properties:
        id:
          $ref: ../core/ID.yaml
          description: The probable canonical ID of the matched entity.
        confidence:
          type: number
          format: float
          description: A score from 0.0 to 1.0 indicating the certainty of the match.
          minimum: 0
          maximum: 1
          example: 0.95
    SearchResultUnit:
      type: object
      description: Represents a single search result, containing a TextUnit and its relevance score.
      required:
        - text_unit
        - score
      properties:
        text_unit:
          $ref: ../entities/TextUnit.yaml
        score:
          type: number
          format: float
          description: The relevance score of the result, typically between 0.0 and 1.0.
          minimum: 0
          maximum: 1
    SearchedItemResult:
      type: object
      description: Represents a single search result, containing an Item and its relevance score.
      required:
        - item
        - score
      properties:
        item:
          $ref: ../entities/Item.yaml
        score:
          type: number
          format: float
          description: The relevance score of the result, typically between 0.0 and 1.0.
          minimum: 0
          maximum: 1
    ErrorResponse:
      type: object
      description: A standard format for error responses.
      properties:
        code:
          type: string
          description: An internal, machine-readable error code.
          example: FORBIDDEN_DATASOURCE
        message:
          type: string
          description: A human-readable description of the error.
          example: The provided API Key does not have access to the 'datasource_STF' datasource.
    CausalityTrace:
      type: object
      description: An object containing the specific Actions that created and (optionally) terminated a Version.
      required:
        - creating_action
      properties:
        creating_action:
          $ref: ../relationships/Action.yaml
          description: The Action that brought this Version into existence (its provenance).
        terminating_action:
          $ref: ../relationships/Action.yaml
          nullable: true
          description: The Action that terminated the validity of this Version. This will be null if the Version is still valid.
    ImpactReport:
      type: object
      description: |
        A structured summary of changes. It contains aggregate statistics and lightweight lists of identifiers for the relevant Actions and affected Items.
      properties:
        statistics:
          type: object
          description: Aggregate counts of actions, grouped by type.
          additionalProperties:
            type: integer
          example:
            Amendment: 12
            Revocation: 5
        actions:
          type: array
          description: A list of unique identifiers for all `Action`s that match the query criteria.
          items:
            $ref: ../core/ID.yaml
        affected_items:
          type: array
          description: A list of unique identifiers for all `Item`s that were affected by the actions in the report.
          items:
            $ref: ../core/ID.yaml
    TextDiffReport:
      type: object
      description: |
        A structured report detailing the differences between two Versions. It can highlight changes at both the textual and structural levels.
      properties:
        changes:
          type: array
          description: An ordered list of differences found between the two versions.
          items:
            type: object
            properties:
              type:
                type: string
                description: The type of change.
                enum:
                  - addition
                  - deletion
                  - modification
              level:
                type: string
                description: The structural level at which the change was detected.
                enum:
                  - component
                  - sentence
                  - word
              component_id:
                $ref: ../core/ID.yaml
                description: The ID of the Item component where the change occurred.
              content_before:
                type: string
                description: The content from the first version ('version A'). Empty for additions.
              content_after:
                type: string
                description: The content from the second version ('version B'). Empty for deletions.
  parameters:
    DatasourcesParameter:
      name: datasources
      in: query
      required: false
      description: |
        **Optional.** A list of identifiers for the Datasources to scope the search.

        A Datasource is the system or provider where an entity originates (e.g., 'datasource_Senate'). This parameter allows you to narrow a search to a specific subset of the Datasources you have access to.

        The API will only return results from Datasources that are both *requested* in this parameter and *granted* to your API key. If this parameter is omitted, the search will run against all Datasources your key is granted to.
      schema:
        type: array
        items:
          type: string
        uniqueItems: true
      example:
        - datasource_A
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
      description: |
        API Key-based authentication. Each consumer must provide their unique API Key
        directly in the `Authorization` header for every request.

        **Example:** `Authorization: YOUR_API_KEY`

        API Keys can be obtained by contacting the system administrator.
  responses:
    BadRequest:
      description: Bad Request - The request is missing a required parameter, includes an invalid parameter value, or is otherwise malformed.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: INVALID_PARAMETER
            message: The 'top_k' parameter must be a positive integer.
    Unauthorized:
      description: Unauthorized - The request lacks valid authentication credentials. The API Key is missing or invalid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: UNAUTHORIZED
            message: Authentication credentials were not provided or are invalid.
    Forbidden:
      description: Forbidden - The server understood the request, but is refusing to fulfill it. The API Key is valid but lacks permission for the requested resource or datasource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: FORBIDDEN_DATASOURCE
            message: The provided API Key does not have access to the 'datasource_STF' datasource.
    NotFound:
      description: Not Found - The requested resource could not be found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: RESOURCE_NOT_FOUND
            message: No Item found with the specified ID.
security:
  - ApiKeyAuth: []
paths:
  /resolve-item-reference:
    get:
      tags:
        - Discovery and Search Actions
      summary: Resolve a text reference to a ranked list of Item IDs.
      operationId: resolveItemReference
      description: |
        Translates an ambiguous, natural-language reference to an entity into a **ranked list of candidate** `Item` IDs.
        This is the critical first step for any query that names a specific entity (a document component, a concept, a named entity, etc.), acting as the bridge between user language and the graph's formal identifiers.

        ### Discussion
        This action is indispensable for grounding agentic workflows. References are often highly ambiguous ("Article 1") or relative ("the following paragraph").
        This function handles this by returning a ranked list of candidates rather than forcing a single, potentially incorrect guess.
        The optional `context_id` parameter significantly enhances its precision for context-aware interactions.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: reference_text
          in: query
          required: true
          description: A string such as "Article 5 of the Constitution", "the Civil Code", or a relative reference like "the previous section".
          schema:
            type: string
          example: Article 5 of the Constitution
        - name: context_id
          in: query
          required: false
          description: Optional. The ID of an 'Item' to provide structural context. This helps resolve relative or ambiguous references.
          schema:
            $ref: '#/components/schemas/ID'
          example: urn:lex:br:federal:constituicao:1988-10-05;1988
        - name: top_k
          in: query
          required: false
          description: The maximum number of candidate matches to return.
          schema:
            type: integer
            format: int32
            default: 3
            minimum: 1
        - $ref: '#/components/parameters/DatasourcesParameter'
      responses:
        '200':
          description: A ranked list of probable Item matches was successfully returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResolvedEntityCandidate'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
  /resolve-theme-reference:
    get:
      tags:
        - Discovery and Search Actions
      summary: Resolve a text reference to a ranked list of Theme IDs.
      operationId: resolveThemeReference
      description: |
        Translates a natural-language name or label for a legal theme into a **ranked list of candidate** `Theme` ids.
        This is the primary entry point for grounding a query in a specific conceptual category.

        ### Discussion
        This action is the conceptual counterpart to `resolveItemReference`. It performs entity linking for thematic nodes, allowing an agent to deterministically identify a theme mentioned by name before using it as a scope in other actions.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: reference_text
          in: query
          required: true
          description: A string representing the name of a theme, such as "Social Security" or "Environmental Law".
          schema:
            type: string
          example: Environmental Law
        - name: top_k
          in: query
          required: false
          description: The maximum number of candidate matches to return.
          schema:
            type: integer
            format: int32
            default: 3
            minimum: 1
        - $ref: '#/components/parameters/DatasourcesParameter'
      responses:
        '200':
          description: A ranked list of probable Theme matches was successfully returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResolvedEntityCandidate'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
  /search-items:
    post:
      tags:
        - Discovery and Search Actions
      summary: Performs a hybrid search for Items across their entire version history.
      operationId: searchItems
      description: |
        Performs a hybrid search to discover `Item` nodes by combining semantic, lexical, and structured criteria.
        This action is intentionally **time-agnostic**, searching across the entire version history of each item's text to ensure comprehensive discovery of the conceptual locus.

        ### Discussion
        This action's purpose is **structural discovery**, not content retrieval. It is used to find the *item* that, at any point in its history, has dealt with a concept. This is fundamentally different from `searchTextUnits`, which finds the specific *text* that was valid at a specific point in time.
      security:
        - ApiKeyAuth: []
      requestBody:
        description: The search criteria for finding Items.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                item_ids:
                  type: array
                  items:
                    $ref: '#/components/schemas/ID'
                  description: Optional. A list of 'Item' IDs to define the search scope.
                theme_ids:
                  type: array
                  items:
                    $ref: '#/components/schemas/ID'
                  description: Optional. A list of 'Theme' IDs to expand the search scope.
                item_metadata_filter:
                  $ref: '#/components/schemas/ItemMetadataFilterSchema'
                semantic_query:
                  type: string
                  description: The natural language query string for vector search.
                lexical_query:
                  type: string
                  description: Keywords or phrases for a full-text syntactic search.
                top_k:
                  type: integer
                  format: int32
                  default: 10
                  minimum: 1
                  description: The maximum number of results to return.
                datasources:
                  $ref: '#/components/schemas/DatasourcesSchema'
      responses:
        '200':
          description: Search executed successfully. Returns a ranked list of Items.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SearchedItemResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
  /search-themes:
    get:
      tags:
        - Discovery and Search Actions
      summary: Performs a hybrid search for Themes based on their descriptions.
      operationId: searchThemes
      description: |
        Performs a hybrid (semantic and/or lexical) search to discover `Theme` nodes based on a descriptive query. 
        This action **searches exclusively on the textual descriptions associated with the themes themselves**.

        At least one of `semantic_query` or `lexical_query` must be provided.

        ### Discussion
        This action's purpose is to map a user's description of a topic to the most appropriate formal concept in the graph. 
        The design allows for both broad conceptual matching (via `semantic_query`) and high-precision keyword filtering (via `lexical_query`).
      security:
        - ApiKeyAuth: []
      parameters:
        - name: semantic_query
          in: query
          required: false
          description: The natural language query string for vector-based semantic search.
          schema:
            type: string
            minLength: 1
          example: laws about consumer protection
        - name: lexical_query
          in: query
          required: false
          description: Keywords or a specific phrase for a full-text syntactic search.
          schema:
            type: string
            minLength: 1
          example: '"environmental impact report"'
        - name: top_k
          in: query
          required: false
          description: The maximum number of candidate themes to return.
          schema:
            type: integer
            format: int32
            default: 5
            minimum: 1
        - $ref: '#/components/parameters/DatasourcesParameter'
      responses:
        '200':
          description: A ranked list of matching Theme candidates was successfully returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SearchedItemResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
  /search-text-units:
    post:
      tags:
        - Discovery and Search Actions
      summary: Performs a hybrid search for TextUnits.
      operationId: searchTextUnits
      description: |
        Performs a hybrid search to discover `TextUnit` nodes by combining semantic, lexical, and structured criteria, returning a ranked list of the most relevant results. This is the primary, optimized entry point for all standard RAG queries.

        ### Discussion
        This action's dual-mode design for scoping provides maximum flexibility.
        - **Conceptual Scope:** The most common mode. The agent defines the "what" (`item_ids`/`theme_ids`) and the "when" (`timestamp`), and the API handles the temporal resolution.
        - **Explicit Version Scope:** A powerful mode for programmatic workflows where an agent has already identified a specific set of `Version`s and needs to perform a semantic search exclusively within that curated set.

        The `aspects` parameter enables a truly holistic search, allowing a query to match a `Work`'s 'textual_metadata' just as easily as an `Version`'s 'canonical' text.
      security:
        - ApiKeyAuth: []
      requestBody:
        description: The search criteria.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchTextUnitsRequest'
      responses:
        '200':
          description: Search executed successfully. Returns a ranked list of TextUnits.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SearchResultUnit'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
  /actions/{actionId}:
    get:
      tags:
        - Deterministic Fetch Actions
      summary: Get a single Action by its unique ID.
      operationId: getAction
      description: |
        Retrieves the full `Action` data object given its unique identifier. This provides direct access to the details of a specific action, including its precise `source_version_id`, and the `Version`s it terminates and produces.

        ### Discussion
        This is a core deterministic action used for auditing and causal analysis. It allows an agent to inspect the exact event that caused a change in a legal norm's version history.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: actionId
          in: path
          required: true
          description: The unique identifier of the Action to retrieve.
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Successfully retrieved the Action object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Action'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /items/{itemId}:
    get:
      tags:
        - Deterministic Fetch Actions
      summary: Get a single Item by its canonical ID.
      operationId: getItem
      description: |
        Retrieves the full `Item` object given its unique, canonical ID.

        ### Discussion
        This is a core deterministic action for retrieving a specific structural node from the graph. It is a direct, primary-key-based lookup.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: itemId
          in: path
          required: true
          description: The canonical ID of the Item to retrieve.
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Successfully retrieved the Item object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /relations/{relationId}:
    get:
      tags:
        - Deterministic Fetch Actions
      summary: Get a single Relation by its unique ID.
      operationId: getRelation
      description: Retrieves the full `Relation` object given its unique identifier. Useful for inspecting the details of a specific link between entities.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: relationId
          in: path
          required: true
          description: The unique identifier of the Relation to retrieve.
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Successfully retrieved the Relation object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Relation'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /themes/{themeId}:
    get:
      tags:
        - Deterministic Fetch Actions
      summary: Get a single Theme by its canonical ID.
      operationId: getTheme
      description: |
        Retrieves the full `Theme` object given its unique, canonical ID.

        ### Discussion
        This is a core deterministic action for retrieving a specific node from the classification ontology. It is a direct, primary-key-based lookup.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: themeId
          in: path
          required: true
          description: The canonical ID of the Theme to retrieve.
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Successfully retrieved the Theme object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Theme'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /item-types/{typeId}:
    get:
      tags:
        - Deterministic Fetch Actions
      summary: Retrieves a single ItemType by its unique ID.
      operationId: getItemType
      description: |
        Fetches the full `ItemType` object given its unique identifier.

        ### Discussion
        This is a deterministic fetch operation that returns complete ItemType data,
        including its position in the taxonomy (parents and children), metadata, and
        the canonical URI/URN if available.

        This endpoint is essential for:
        - Validating item hierarchies (checking if a type can contain another)
        - Displaying type information in UIs
        - Building type-aware editors and forms
        - Understanding the type system structure
      security:
        - ApiKeyAuth: []
      parameters:
        - name: typeId
          in: path
          required: true
          description: The unique ID of the ItemType to retrieve.
          schema:
            $ref: '#/components/schemas/ID'
          example: item-type:123456
      responses:
        '200':
          description: Successfully retrieved the ItemType object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemType'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /text-units/{textUnitId}:
    get:
      tags:
        - Deterministic Fetch Actions
      summary: Get a single TextUnit by its unique ID.
      operationId: getTextUnit
      description: |
        Retrieves the full `TextUnit` object given its unique identifier, including its content and all associated metadata.

        ### Discussion
        While the primary method for discovering `TextUnit`s is through the `searchTextUnits` function, this deterministic endpoint provides direct, primary-key-based access. It ensures API completeness, allowing a client to retrieve a specific text snippet if it only has its ID, which might occur in advanced logging or auditing workflows.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: textUnitId
          in: path
          required: true
          description: The unique identifier of the TextUnit to retrieve.
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Successfully retrieved the TextUnit object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TextUnit'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /versions/{versionId}:
    get:
      tags:
        - Deterministic Fetch Actions
      summary: Get a single Version by its unique ID.
      operationId: getVersion
      description: Retrieves the full `Version` object given its unique identifier. This is the primary way to inspect the details of a specific temporal snapshot of an Item.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: versionId
          in: path
          required: true
          description: The unique identifier of the Version to retrieve.
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Successfully retrieved the Version object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Version'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /items/batch-get:
    post:
      tags:
        - Deterministic Fetch Actions
      summary: Gets a batch of Item objects by their canonical IDs.
      operationId: getBatchItems
      description: |
        A batch-optimized version of `getItem`. Given a list of IDs, it efficiently retrieves the full data object for each corresponding `Item` in a single request.

        ### Discussion
        This is a fundamental utility action used after any discovery process to hydrate references into full objects. It is the primary solution to avoid the "N+1 query problem," where a client would otherwise need to make one API call per ID.
      security:
        - ApiKeyAuth: []
      requestBody:
        description: The list of Item IDs to retrieve.
        required: true
        content:
          application/json:
            schema:
              $ref: ../../schemas/requests/GetBatchItemsRequest.yaml
      responses:
        '200':
          description: |
            A list of the requested Item objects. The returned list may be shorter than the input list if some IDs were not found or if the consumer lacked permission. The order of the returned items is not guaranteed to match the input order.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../../schemas/entities/Item.yaml
        '400':
          $ref: ../../openapi.yaml#/components/responses/BadRequest
        '401':
          $ref: ../../openapi.yaml#/components/responses/Unauthorized
        '403':
          $ref: ../../openapi.yaml#/components/responses/Forbidden
  /versions/batch-valid-at:
    post:
      tags:
        - Deterministic Fetch Actions
      summary: Gets a batch of valid Versions for multiple Items at a single point in time.
      operationId: getBatchValidVersions
      description: |
        A batch-optimized version of `getValidVersion`. Given a list of Item IDs, it efficiently retrieves all of their corresponding `Version`s that were valid on a single, specified timestamp.

        ### Discussion
        This action is essential for efficiently reconstructing the state of a complex hierarchical item at a specific point in time. It is designed to be used directly with the output of `enumerateItems` to avoid the "N+1 query problem" for temporal reconstruction.
      security:
        - ApiKeyAuth: []
      requestBody:
        description: The criteria for retrieving the batch of valid versions.
        required: true
        content:
          application/json:
            schema:
              $ref: ../../schemas/requests/GetBatchValidVersionsRequest.yaml
      responses:
        '200':
          description: |
            A list of the requested valid Version objects. The returned list may be shorter than the input list if some items did not have a valid version at the given timestamp or if the consumer lacked permission. The order of the returned items is not guaranteed.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../../schemas/entities/Version.yaml
        '400':
          $ref: ../../openapi.yaml#/components/responses/BadRequest
        '401':
          $ref: ../../openapi.yaml#/components/responses/Unauthorized
        '403':
          $ref: ../../openapi.yaml#/components/responses/Forbidden
  /actions/batch-get:
    post:
      tags:
        - Deterministic Fetch Actions
      summary: Gets a batch of Action objects by their unique IDs.
      operationId: getBatchActions
      description: |
        A batch-optimized version of `getAction`. Given a list of action identifiers, it efficiently retrieves the full data object for each corresponding `Action` in a single request.

        ### Discussion
        This action is essential for the "hydration" step of analytical queries. After an agent discovers a set of relevant `Action` IDs via a function like `summarizeImpact`, this batch operation allows it to retrieve the full details of each action to build a complete and auditable report without the high performance cost of N+1 individual requests.
      security:
        - ApiKeyAuth: []
      requestBody:
        description: The list of Action IDs to retrieve.
        required: true
        content:
          application/json:
            schema:
              $ref: ../../schemas/requests/GetBatchActionsRequest.yaml
      responses:
        '200':
          description: |
            A list of the requested Action objects. The returned list may be shorter than the input list if some IDs were not found or if the consumer lacked permission. The order of the returned items is not guaranteed to match the input order.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../../schemas/relationships/Action.yaml
        '400':
          $ref: ../../openapi.yaml#/components/responses/BadRequest
        '401':
          $ref: ../../openapi.yaml#/components/responses/Unauthorized
        '403':
          $ref: ../../openapi.yaml#/components/responses/Forbidden
  /text-units/batch-get:
    post:
      tags:
        - Deterministic Fetch Actions
      summary: Gets a batch of TextUnit objects by the IDs of their source Versions.
      operationId: getBatchTexts
      description: |
        A batch-optimized version of getTextForVersion. Given a list of Version identifiers,
        it efficiently retrieves their corresponding textual content.

        This action is critical for use cases that require inspecting the content of multiple
        versions, such as finding the exact point of a textual change within a long version history.
        It prevents the severe performance degradation that would result from iterating and calling
        getTextForVersion individually for each version.
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - version_ids
                - language
              properties:
                version_ids:
                  type: array
                  description: A list of identifiers for the Versions of interest.
                  items:
                    $ref: ../../schemas/core/ID.yaml
                  minItems: 1
                  uniqueItems: true
                language:
                  type: string
                  description: The language code to retrieve (e.g., 'pt-br', 'en').
                  pattern: ^[a-zA-Z]{2,3}(?:-[a-zA-Z0-9]+)*$
                  example: pt-br
                aspects:
                  type: array
                  description: |
                    Optional. A list of textual aspects to retrieve for all Versions
                    (e.g., ["canonical", "summary"]). Defaults to ["canonical"].
                  items:
                    type: string
                  default:
                    - canonical
                  example:
                    - canonical
                    - summary
                datasources:
                  description: |
                    Optional. A list of datasource identifiers to scope the query.

                    **Note:** This parameter is a security/scoping feature applied consistently
                    across all batch operations, though not specified in the canonical model.
                    It filters results to only those from authorized datasources.
                  $ref: ../../schemas/common/DatasourcesSchema.yaml
      responses:
        '200':
          description: A list of the requested TextUnit objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../../schemas/entities/TextUnit.yaml
        '400':
          $ref: ../../openapi.yaml#/components/responses/BadRequest
        '401':
          $ref: ../../openapi.yaml#/components/responses/Unauthorized
        '403':
          $ref: ../../openapi.yaml#/components/responses/Forbidden
  /items/{itemId}/ancestors:
    get:
      tags:
        - Structural Navigation Actions
      summary: Retrieves the hierarchical ancestors of a single Item.
      operationId: getItemAncestors
      description: |
        Navigates the hierarchy upwards from a specific structural `Item` to its parent, grandparent, and so on, up to the root `Work`. This is crucial for retrieving the full contextual path ("breadcrumb") of any given provision.

        The returned list is **ordered** from the highest-level ancestor (e.g., a `Title`) down to the immediate parent of the input item. The root `Work` and the item itself are excluded from the list.

        ### Discussion
        This action is the fundamental tool for contextualization. After a search identifies a relevant item, an agent should use `getItemAncestors` to retrieve its structural path. This allows the generation of richer, context-aware responses, significantly improving the quality and explainability of the final answer.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: itemId
          in: path
          required: true
          description: The canonical ID of the Item whose ancestors are to be retrieved.
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: An ordered list of the ancestor Item objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /items/{itemId}/context:
    get:
      tags:
        - Structural Navigation Actions
      summary: Retrieves the immediate structural context of an Item in a single call.
      operationId: getItemContext
      description: |
        Retrieves the complete, immediate structural context of a single `Item` in one efficient call. This includes its parent, siblings, and direct children.

        ### Discussion
        This is a high-utility, performance-oriented action designed for applications that need to render a contextual view of an item (e.g., a document browser or a table of contents). Replicating this functionality would require multiple, less efficient API calls (`getItemAncestors`, `enumerateItems`). By providing this as a single, atomic operation, the API dramatically simplifies the logic for common UI and agentic navigation tasks.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: itemId
          in: path
          required: true
          description: The canonical ID of the Item for which to retrieve the context.
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Successfully retrieved the structural context.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StructuralContext'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /items/{itemId}/themes:
    get:
      tags:
        - Structural Navigation Actions
      summary: Retrieves all Themes associated with a single Item.
      operationId: getThemesForItem
      description: |
        Retrieves a list of all `Theme`s that are directly associated with a specific `Item`. This provides a direct inverse navigation from a structural entity to its classifications in the conceptual ontology.

        ### Discussion
        This action is the essential counterpart to using a `Theme` as a scope in `enumerateItems`. It makes the relationship between items and themes fully bidirectional, enabling an agent to efficiently answer questions like "What topics does this article cover?". Without this primitive, an agent would need to resort to a highly inefficient brute-force search across the entire thematic ontology.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: itemId
          in: path
          required: true
          description: The canonical ID of the Item whose thematic classifications are requested.
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: A list of Theme objects associated with the Item. The list may be empty if the Item has no thematic classifications.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Theme'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /enumerate-items:
    post:
      tags:
        - Structural Navigation Actions
      summary: Enumerates Items within a structural or thematic scope.
      operationId: enumerateItems
      description: |
        Enumerates and returns full `Item` objects based on a specified structural or thematic scope. At least one of `item_ids` or `theme_ids` must be provided.

        ### Scope Logic
        - If both `item_ids` and `theme_ids` are provided, the function returns the **union** of all items found in both scopes (without duplicates).
        - The `depth` parameter applies exclusively to scopes defined by `item_ids`.

        ### Discussion
        This action's purpose is **structural enumeration and navigation**, not search filtering. It is the correct tool for tasks like building a table of contents or programmatically exploring the members of a conceptual theme. For performing content-based searches within a scope, agents should pass the scope's ID directly to the search functions (`searchTextUnits`, `searchItems`), as this is significantly more performant.
      security:
        - ApiKeyAuth: []
      requestBody:
        description: The scope definition for the enumeration.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnumerateItemsRequest'
      responses:
        '200':
          description: A list of Item objects within the specified scope.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
  /entities/{entityId}/related:
    get:
      tags:
        - Graph Traversal Actions
      summary: Finds related entities by traversing a specific relationship.
      operationId: findRelatedEntities
      description: |
        A powerful and flexible action to query and retrieve complete `Relation` objects based on a variety of criteria.

        This function supports two primary modes:
        1.  **Local Traversal:** By providing an `entity_id` and `entity_type`, the query is anchored to a specific entity, finding its connections.
        2.  **Corpus-Level Analysis:** By omitting `entity_id`, the query runs against the entire set of relations in the graph, allowing for aggregate, system-wide analysis filtered by predicate, time, or metadata.

        ### Discussion
        This is a low-level, high-precision tool for advanced use cases. It allows for both detailed graph navigation starting from a node and broad, analytical queries over the entire relational fabric.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: entityId
          in: path
          required: true
          description: The ID of the starting entity (Item or Version) for the traversal.
          schema:
            $ref: '#/components/schemas/ID'
        - name: entity_type
          in: query
          required: true
          description: The type of the starting entity.
          schema:
            type: string
            enum:
              - Item
              - Version
        - name: predicate
          in: query
          required: true
          description: The type of relation to traverse (e.g., 'cites', 'succeeded_by').
          schema:
            type: string
        - name: direction
          in: query
          required: true
          description: 'Direction of traversal: ''forward'' (from subject to object) or ''backward'' (from object to subject).'
          schema:
            type: string
            enum:
              - forward
              - backward
        - $ref: '#/components/parameters/DatasourcesParameter'
      responses:
        '200':
          description: A list of the related entities found. The list may be empty if no related entities match the criteria.
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/Item'
                    - $ref: '#/components/schemas/Version'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /query-relations:
    post:
      tags:
        - Graph Traversal Actions
      summary: Queries for full Relation objects based on complex criteria.
      operationId: getRelations
      description: |
        A powerful action to query and retrieve complete `Relation` objects based on a variety of criteria, including the anchor entity, predicate, direction, temporal validity, and metadata.

        ### Discussion
        This is a low-level, high-precision tool for advanced use cases where the details of the graph's connections are paramount. It allows for complex temporal and structural queries on the relationships themselves.
      security:
        - ApiKeyAuth: []
      requestBody:
        description: The criteria for the Relation query.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetRelationsRequest'
      responses:
        '200':
          description: A list of full Relation objects matching the criteria. The list may be empty if no relations are found.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Relation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
  /items/{itemId}/valid-version:
    get:
      tags:
        - Deterministic Fetch Actions
      summary: Gets the single Version of an Item that was valid at a specific time.
      operationId: getValidVersion
      description: |
        The core temporal resolution function. It finds the single `Version` of a given `Item` that was legally in force at a specific point in time, according to a specified temporal policy.

        ### Discussion
        The explicit `policy` parameter is essential for guaranteeing determinism. It allows the agent to specify the exact temporal logic required, such as retrieving the last valid version within a day (`SnapshotLast`) or handling boundary conditions in a predictable manner (`PointInTime`).
      security:
        - ApiKeyAuth: []
      parameters:
        - name: itemId
          in: path
          required: true
          description: The canonical ID of the Item whose valid version is being requested.
          schema:
            $ref: '#/components/schemas/ID'
        - name: timestamp
          in: query
          required: true
          description: The specific UTC date-time for which to check validity.
          schema:
            type: string
            format: date-time
          example: '1999-06-01T12:00:00Z'
        - name: policy
          in: query
          required: false
          description: |
            The temporal resolution policy to apply. If not specified, defaults to `SnapshotLast`.

            - `SnapshotLast` (default): Finds the last version valid at any point during the day of the timestamp
            - `PointInTime`: Finds the version whose validity interval strictly contains the exact timestamp
          schema:
            $ref: '#/components/schemas/TemporalPolicy'
      responses:
        '200':
          description: Successfully retrieved the unique Version object valid at the specified time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Version'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Not Found - Either the Item with the given ID does not exist, or it existed but had no version that was valid at the specified timestamp.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /versions/{versionId}/text-unit:
    get:
      tags:
        - Deterministic Fetch Actions
      summary: Gets the specific TextUnit for a Version in a given language.
      operationId: getTextForVersion
      description: |
        Deterministically retrieves a specific textual representation (a `TextUnit`) for a single, known `Version` in a given language. This is a direct-access, primary-key-based lookup, not a search operation.

        ### Discussion
        This action is fundamentally different from `searchTextUnits`. While the latter is a probabilistic discovery tool, `getTextForVersion` is a deterministic fetch. It serves the critical use case where an agent has already identified a specific `Version` (e.g., via `getValidVersion`) and requires its exact textual content.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: versionId
          in: path
          required: true
          description: The unique identifier of the Version whose text is requested.
          schema:
            $ref: '#/components/schemas/ID'
        - name: language
          in: query
          required: true
          description: The IETF BCP 47 language code for the desired text.
          schema:
            type: string
            pattern: ^[a-zA-Z]{2,3}(?:-[a-zA-Z0-9]+)*$
          example: pt-BR
      responses:
        '200':
          description: Successfully retrieved the TextUnit for the specified Version and language.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TextUnit'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /items/{itemId}/history:
    get:
      tags:
        - Causal Analysis Actions
      summary: Gets the historical timeline of actions for a single Item.
      operationId: getItemHistory
      description: |
        Provides a complete, ordered timeline of all `Action`s that have affected a given `Item`. The returned list is ordered chronologically from the oldest to the most recent action.

        ### Discussion
        This action provides a complete, auditable narrative of an item's evolution. An agent can iterate through the returned list of `Action`s to reconstruct every state transition, accessing the "before" state via `terminates_version_id` and the "after" state via `produces_version_id` for each step.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: itemId
          in: path
          required: true
          description: The canonical ID of the Item whose history is requested.
          schema:
            $ref: ../../schemas/core/ID.yaml
        - name: start_time
          in: query
          required: false
          description: Optional. Filters actions to those that occurred on or after this UTC date-time.
          schema:
            type: string
            format: date-time
        - name: end_time
          in: query
          required: false
          description: Optional. Filters actions to those that occurred on or before this UTC date-time.
          schema:
            type: string
            format: date-time
        - name: action_types
          in: query
          required: false
          description: Optional. Filters for specific types of actions (e.g., 'Amendment', 'Revocation').
          schema:
            type: array
            items:
              type: string
              enum:
                - Amendment
                - Revocation
                - Creation
                - Repeal
      responses:
        '200':
          description: A time-ordered list of Action objects representing the item's history. The list may be empty if the item has no recorded history.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../../schemas/relationships/Action.yaml
        '400':
          $ref: ../../openapi.yaml#/components/responses/BadRequest
        '401':
          $ref: ../../openapi.yaml#/components/responses/Unauthorized
        '403':
          $ref: ../../openapi.yaml#/components/responses/Forbidden
        '404':
          $ref: ../../openapi.yaml#/components/responses/NotFound
  /versions/{versionId}/causality:
    get:
      tags:
        - Causal Analysis Actions
      summary: Traces the direct causal links for a single Version.
      operationId: traceCausality
      description: |
        Traces the direct causal links for a single `Version`. It identifies the specific `Action` that brought this `Version` into existence (its provenance) and, if applicable, the `Action` that terminated its validity.

        ### Discussion
        This action is crucial for pinpointing the exact act responsible for a specific version of a text, facilitating precise auditability at the event level.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: versionId
          in: path
          required: true
          description: The unique identifier of the Version to trace.
          schema:
            $ref: ../../schemas/core/ID.yaml
      responses:
        '200':
          description: Successfully retrieved the causality trace for the Version.
          content:
            application/json:
              schema:
                $ref: ../../schemas/responses/CausalityTrace.yaml
        '400':
          $ref: ../../openapi.yaml#/components/responses/BadRequest
        '401':
          $ref: ../../openapi.yaml#/components/responses/Unauthorized
        '403':
          $ref: ../../openapi.yaml#/components/responses/Forbidden
        '404':
          $ref: ../../openapi.yaml#/components/responses/NotFound
  /items/{itemId}/versions:
    get:
      tags:
        - Causal Analysis Actions
      summary: Gets all Versions of an Item that were valid within a time interval.
      operationId: getVersionsInInterval
      description: |
        Retrieves all `Version`s of a given `Item` that were legally valid at any point within a specified time interval. The returned list is ordered chronologically (ascending).

        ### Discussion
        This function serves as a critical performance optimization for historical analysis. While `getItemHistory` retrieves the causal *events* (`Action`s), this action retrieves the resulting *states* (`Version`s) within a specific temporal window. By providing this as a server-side primitive, the API enables an agent to efficiently answer questions like "show all versions of this article during a specific presidential term."
      security:
        - ApiKeyAuth: []
      parameters:
        - name: itemId
          in: path
          required: true
          description: The canonical ID of the Item of interest.
          schema:
            $ref: ../../schemas/core/ID.yaml
        - name: start_time
          in: query
          required: true
          description: The start of the time interval for the query (UTC date-time).
          schema:
            type: string
            format: date-time
          example: '2010-01-01T00:00:00Z'
        - name: end_time
          in: query
          required: true
          description: The end of the time interval for the query (UTC date-time).
          schema:
            type: string
            format: date-time
          example: '2014-12-31T23:59:59Z'
      responses:
        '200':
          description: A time-ordered list (ascending) of Version objects whose validity period overlaps with the specified interval. The list may be empty if no versions match.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../../schemas/entities/Version.yaml
        '400':
          $ref: ../../openapi.yaml#/components/responses/BadRequest
        '401':
          $ref: ../../openapi.yaml#/components/responses/Unauthorized
        '403':
          $ref: ../../openapi.yaml#/components/responses/Forbidden
        '404':
          $ref: ../../openapi.yaml#/components/responses/NotFound
  /versions/compare:
    get:
      tags:
        - Causal Analysis Actions
      summary: Performs a structure-aware comparison between two Versions.
      operationId: compareVersions
      description: |
        Performs a granular, structure-aware comparison between the textual content of two different `Version`s. It highlights additions, deletions, and modifications.

        ### Discussion
        This action provides a powerful, server-side analysis that goes beyond a simple textual `diff`. Because the server has access to the full graph structure, it can perform a **structural comparison**, identifying not just changed words but also added or removed components. This transforms the comparison into a true structural impact analysis, fundamental for legal practitioners.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: version_id_a
          in: query
          required: true
          description: Identifier of the first Version (the 'before' state).
          schema:
            $ref: ../../schemas/core/ID.yaml
        - name: version_id_b
          in: query
          required: true
          description: Identifier of the second Version (the 'after' state).
          schema:
            $ref: ../../schemas/core/ID.yaml
      responses:
        '200':
          description: Successfully generated and returned the text diff report.
          content:
            application/json:
              schema:
                $ref: ../../schemas/responses/TextDiffReport.yaml
        '400':
          $ref: ../../openapi.yaml#/components/responses/BadRequest
        '401':
          $ref: ../../openapi.yaml#/components/responses/Unauthorized
        '403':
          $ref: ../../openapi.yaml#/components/responses/Forbidden
        '404':
          description: Not Found - One or both of the specified Version IDs could not be found.
          content:
            application/json:
              schema:
                $ref: ../../openapi.yaml#/components/schemas/ErrorResponse
  /items/{sourceWorkId}/actions-caused:
    get:
      tags:
        - Causal Analysis Actions
      summary: Retrieves all Actions caused by a specific source Work.
      operationId: getActionsBySource
      description: |
        An essential action for impact analysis that provides forward causal tracing. Given the ID of a source `Work` (e.g., an amending law), it retrieves all atomic `Action`s authorized by any clause within that Work.

        The returned list is ordered chronologically by the action's effective date.

        ### Discussion
        This action is the logical inverse of `traceCausality`. It traces forwards from a high-level cause to all of its granular effects, answering the critical question: "What did Law X do?".
      security:
        - ApiKeyAuth: []
      parameters:
        - name: sourceWorkId
          in: path
          required: true
          description: The canonical ID of the source 'Work' (e.g., an amending law).
          schema:
            $ref: ../../schemas/core/ID.yaml
        - name: action_types
          in: query
          required: false
          description: Optional. Filters for specific types of actions.
          schema:
            type: array
            items:
              type: string
              enum:
                - Amendment
                - Revocation
                - Creation
                - Repeal
        - $ref: ../../openapi.yaml#/components/parameters/DatasourcesParameter
      responses:
        '200':
          description: A time-ordered list of Action objects caused by the specified source. The list may be empty.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../../schemas/relationships/Action.yaml
        '400':
          $ref: ../../openapi.yaml#/components/responses/BadRequest
        '401':
          $ref: ../../openapi.yaml#/components/responses/Unauthorized
        '403':
          $ref: ../../openapi.yaml#/components/responses/Forbidden
        '404':
          $ref: ../../openapi.yaml#/components/responses/NotFound
  /analysis/impact-summary:
    post:
      tags:
        - Aggregate Analysis Actions
      summary: Provides a high-level summary of impact over a scope and time period.
      operationId: summarizeImpact
      description: |
        An aggregate analysis action that provides a high-level summary of changes that occurred within a specific scope during a defined time period.

        ### Discussion
        This powerful action enables macro-level analysis by offloading complex processing to the server. It is the primary primitive for answering broad questions about evolution. The `ImpactReport` intentionally contains lightweight identifiers, allowing an agent to selectively hydrate full details using batch operations as needed.
      security:
        - ApiKeyAuth: []
      requestBody:
        description: The criteria for the impact summary.
        required: true
        content:
          application/json:
            schema:
              $ref: ../../schemas/requests/SummarizeImpactRequest.yaml
      responses:
        '200':
          description: Successfully generated and returned the impact report.
          content:
            application/json:
              schema:
                $ref: ../../schemas/responses/ImpactReport.yaml
        '400':
          $ref: ../../openapi.yaml#/components/responses/BadRequest
        '401':
          $ref: ../../openapi.yaml#/components/responses/Unauthorized
        '403':
          $ref: ../../openapi.yaml#/components/responses/Forbidden
  /items/{itemId}/temporal-coverage:
    get:
      tags:
        - Introspection & Metadata Actions
      summary: Gets the known temporal coverage (version history) for an Item.
      operationId: getTemporalCoverage
      description: |
        Returns the start and end dates of the known version history for a specific `Item`.

        ### Discussion
        This action enables an agent to be aware of its own knowledge boundaries. It should be used to proactively validate a user's temporal query before attempting retrieval, allowing for graceful handling of requests for dates outside the known history and improving the overall user experience.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: itemId
          in: path
          required: true
          description: The canonical ID of the Item whose temporal coverage is requested.
          schema:
            $ref: ../../schemas/core/ID.yaml
      responses:
        '200':
          description: Successfully retrieved the temporal coverage interval. The end date will be null if the item is still considered active.
          content:
            application/json:
              schema:
                $ref: ../../schemas/core/TimeInterval.yaml
        '400':
          $ref: ../../openapi.yaml#/components/responses/BadRequest
        '401':
          $ref: ../../openapi.yaml#/components/responses/Unauthorized
        '403':
          $ref: ../../openapi.yaml#/components/responses/Forbidden
        '404':
          $ref: ../../openapi.yaml#/components/responses/NotFound
  /meta/languages:
    get:
      tags:
        - Introspection & Metadata Actions
      summary: Gets a list of all available language codes in the graph.
      operationId: getAvailableLanguages
      description: |
        Returns a list of all language codes (IETF BCP 47 format) for which textual content is available in the knowledge graph.

        ### Discussion
        This action enables an agent or user interface to dynamically present language options to the user, ensuring that requests are only made for languages that the system actually supports.
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: A list of available language codes (BCP 47).
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  pattern: ^[a-zA-Z]{2,3}(?:-[a-zA-Z0-9]+)*$
                  example: pt-BR
        '401':
          $ref: ../../openapi.yaml#/components/responses/Unauthorized
        '403':
          $ref: ../../openapi.yaml#/components/responses/Forbidden
  /meta/action-types:
    get:
      tags:
        - Introspection & Metadata Actions
      summary: Gets the list of all supported action types.
      operationId: getSupportedActionTypes
      description: |
        Returns a list of all legislative action types (e.g., `Amendment`, `Revocation`) recognized by the graph's ontology.

        ### Discussion
        This action provides the canonical list of values that can be used in the `action_types` filter of other functions like `summarizeImpact` and `getItemHistory`. It allows a client application to dynamically build filtering interfaces without hardcoding ontology-specific values.
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: A list of supported action type strings.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  pattern: ^[A-Z][a-zA-Z]*$
                  example: Amendment
                example:
                  - Amendment
                  - Revocation
                  - Creation
                  - Repeal
        '401':
          $ref: ../../openapi.yaml#/components/responses/Unauthorized
        '403':
          $ref: ../../openapi.yaml#/components/responses/Forbidden
  /item-types/roots:
    get:
      tags:
        - Introspection & Metadata Actions
      summary: Gets the root nodes of the ItemType taxonomy.
      operationId: getRootItemTypes
      description: |
        Retrieves a list of all `ItemType` objects that are at the root of the type taxonomy
        (i.e., types that have no parents within their category).

        ### Discussion
        This is the primary action for exploring the ItemType taxonomy. It provides an efficient
        entry point to the type system, allowing clients to render the top-level types and then
        "lazy-load" sub-trees by fetching children as needed.

        **Use Cases:**
        - Build cascading type selectors in UIs (select category → show root types → expand children)
        - Understand the top-level structure of the type system
        - Initialize type navigation interfaces
        - Generate documentation of the type hierarchy

        The optional `category` parameter allows filtering to only root types within a specific
        architectural category (e.g., only root types for "Work" or "Work Component").
      security:
        - ApiKeyAuth: []
      parameters:
        - name: category
          in: query
          required: false
          description: |
            Optional. Filter root types to only those in a specific category.

            Valid values: `Work`, `Work Component`, `Term`, `Concept`, `Named Entity`.

            When omitted, returns root types across all categories.
          schema:
            type: string
            enum:
              - Work
              - Work Component
              - Term
              - Concept
              - Named Entity
          example: Work Component
      responses:
        '200':
          description: A list of root ItemType objects, optionally filtered by category.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ItemType'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
  /themes/roots:
    get:
      tags:
        - Introspection & Metadata Actions
      summary: Gets the root nodes of the thematic taxonomy.
      operationId: getRootThemes
      description: |
        Retrieves a list of all `Theme` objects that are at the root of the thematic taxonomy (i.e., themes that have no parents).

        ### Discussion
        This is the primary action for an agent or user interface to begin exploring the thematic ontology. It provides an efficient entry point to the taxonomy, allowing a client to render the top-level themes and then "lazy-load" sub-trees by fetching the children of each theme as needed. This approach is highly performant and scalable, avoiding the "N+1 query problem" that would arise from fetching a flat list of all themes.
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: A list of the root Theme objects. The list will be empty if no themes are defined.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../../schemas/entities/Theme.yaml
        '401':
          $ref: ../../openapi.yaml#/components/responses/Unauthorized
        '403':
          $ref: ../../openapi.yaml#/components/responses/Forbidden
